// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AthenaHealth.
    /// </summary>
    public static partial class AthenaHealthExtensions
    {
            /// <summary>
            /// Get available practice IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Number of entries to return (default 1500, max 5000)
            /// </param>
            /// <param name='offset'>
            /// Starting point of entries; 0-indexed
            /// </param>
            public static PracticesInformationList GetPracticeInfo(this IAthenaHealth operations, int? limit = default(int?), int? offset = default(int?))
            {
                return operations.GetPracticeInfoAsync(limit, offset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available practice IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Number of entries to return (default 1500, max 5000)
            /// </param>
            /// <param name='offset'>
            /// Starting point of entries; 0-indexed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PracticesInformationList> GetPracticeInfoAsync(this IAthenaHealth operations, int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPracticeInfoWithHttpMessagesAsync(limit, offset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get department IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Number of entries to return (default 1500, max 5000)
            /// </param>
            /// <param name='offset'>
            /// Starting point of entries; 0-indexed
            /// </param>
            public static DepartmentInformationList GetDepartments(this IAthenaHealth operations, int? limit = default(int?), int? offset = default(int?))
            {
                return operations.GetDepartmentsAsync(limit, offset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get department IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limit'>
            /// Number of entries to return (default 1500, max 5000)
            /// </param>
            /// <param name='offset'>
            /// Starting point of entries; 0-indexed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DepartmentInformationList> GetDepartmentsAsync(this IAthenaHealth operations, int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDepartmentsWithHttpMessagesAsync(limit, offset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
