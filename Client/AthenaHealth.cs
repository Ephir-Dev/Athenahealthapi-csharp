// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public partial class AthenaHealth : ServiceClient<AthenaHealth>, IAthenaHealth
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Variant of the API
        /// </summary>
        public string Apivariant { get; set; }

        /// <summary>
        /// Id of the practice
        /// </summary>
        public int Practiceid { get; set; }

        /// <summary>
        /// Number of entries to return (default 1500, max 5000)
        /// </summary>
        public int? Limit { get; set; }

        /// <summary>
        /// Starting point of entries; 0-indexed
        /// </summary>
        public int? Offset { get; set; }

        /// <summary>
        /// Client API version.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AthenaHealth.Dispose(). False: will not dispose provided httpClient</param>
        protected AthenaHealth(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AthenaHealth(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AthenaHealth(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AthenaHealth(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AthenaHealth(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AthenaHealth(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AthenaHealth.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AthenaHealth(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AthenaHealth(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AthenaHealth(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AthenaHealth class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AthenaHealth(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("https://api.athenahealth.com");
            ApiVersion = "1.0.0";
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <param name='limit'>
        /// Number of entries to return (default 1500, max 5000)
        /// </param>
        /// <param name='offset'>
        /// Starting point of entries; 0-indexed
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PracticesInformationList>> GetPracticeInfoWithHttpMessagesAsync(int? limit = default(int?), int? offset = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            if (limit > 5000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "limit", 5000);
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("limit", limit);
                tracingParameters.Add("offset", offset);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPracticeInfo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/practiceinfo").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (limit != null)
            {
                _queryParameters.Add(string.Format("limit={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(limit, SerializationSettings).Trim('"'))));
            }
            if (offset != null)
            {
                _queryParameters.Add(string.Format("offset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(offset, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PracticesInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PracticesInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <param name='limit'>
        /// Number of entries to return (default 1500, max 5000)
        /// </param>
        /// <param name='offset'>
        /// Starting point of entries; 0-indexed
        /// </param>
        /// <param name='hospitalonly'>
        /// If set to true, return hospital only departments.
        /// </param>
        /// <param name='showalldepartments'>
        /// By default, departments hidden in the portal do not appear. When this is
        /// set to true, that restriction is not applied. Default is false.
        /// </param>
        /// <param name='providerlist'>
        /// If set to true, list providers who see patients in this department. Default
        /// is false.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<DepartmentInformationList>> GetDepartmentsWithHttpMessagesAsync(int? limit = default(int?), int? offset = default(int?), bool? hospitalonly = default(bool?), bool? showalldepartments = default(bool?), bool? providerlist = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            if (limit > 5000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "limit", 5000);
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("limit", limit);
                tracingParameters.Add("offset", offset);
                tracingParameters.Add("hospitalonly", hospitalonly);
                tracingParameters.Add("showalldepartments", showalldepartments);
                tracingParameters.Add("providerlist", providerlist);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetDepartments", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/departments").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (limit != null)
            {
                _queryParameters.Add(string.Format("limit={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(limit, SerializationSettings).Trim('"'))));
            }
            if (offset != null)
            {
                _queryParameters.Add(string.Format("offset={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(offset, SerializationSettings).Trim('"'))));
            }
            if (hospitalonly != null)
            {
                _queryParameters.Add(string.Format("hospitalonly={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(hospitalonly, SerializationSettings).Trim('"'))));
            }
            if (showalldepartments != null)
            {
                _queryParameters.Add(string.Format("showalldepartments={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showalldepartments, SerializationSettings).Trim('"'))));
            }
            if (providerlist != null)
            {
                _queryParameters.Add(string.Format("providerlist={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(providerlist, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<DepartmentInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<DepartmentInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <param name='departmentid'>
        /// Primary (registration) department ID.
        /// </param>
        /// <param name='firstname'>
        /// First name of the patient to find.
        /// </param>
        /// <param name='lastname'>
        /// Last name of the patient to find.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PatientInformationList>> GetPatientsWithHttpMessagesAsync(int? departmentid = default(int?), string firstname = default(string), string lastname = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("firstname", firstname);
                tracingParameters.Add("lastname", lastname);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatients", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/patients").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (departmentid != null)
            {
                _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            }
            if (firstname != null)
            {
                _queryParameters.Add(string.Format("firstname={0}", System.Uri.EscapeDataString(firstname)));
            }
            if (lastname != null)
            {
                _queryParameters.Add(string.Format("lastname={0}", System.Uri.EscapeDataString(lastname)));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PatientInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PatientInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <param name='address1'>
        /// Patient's address - 1st line (Max length: 100)
        /// </param>
        /// <param name='address2'>
        /// Patient's address - 2nd line (Max length: 100)
        /// </param>
        /// <param name='city'>
        /// Patient's city (Max length: 30)
        /// </param>
        /// <param name='departmentid'>
        /// Primary (registration) department ID.
        /// </param>
        /// <param name='dob'>
        /// Patient's DOB (mm/dd/yyyy)
        /// </param>
        /// <param name='email'>
        /// Patient's email address. 'declined' can be used to indicate just that.
        /// </param>
        /// <param name='firstname'>
        /// Patient's first name
        /// </param>
        /// <param name='homephone'>
        /// The patient's home phone number. Invalid numbers in a GET will be ignored.
        /// Patient phone numbers and other data may change, and one phone number may
        /// be associated with multiple patients. You are responsible for taking
        /// additional steps to verify patient identity and for using this data in
        /// accordance with applicable law, including HIPAA. Only phone numbers that
        /// exist in the North American Naming Plan (NANP) are acceptable for input.
        /// </param>
        /// <param name='lastname'>
        /// Patient's last name
        /// </param>
        /// <param name='mobilephone'>
        /// The patient's mobile phone number. On input, 'declined' can be used to
        /// indicate no number. (Alternatively, hasmobile can also be set to false.
        /// "declined" simply does this for you.) Invalid numbers in a GET will be
        /// ignored. Patient phone numbers and other data may change, and one phone
        /// number may be associated with multiple patients. You are responsible for
        /// taking additional steps to verify patient identity and for using this data
        /// in accordance with applicable law, including HIPAA. Only phone numbers that
        /// exist in the North American Naming Plan (NANP) are acceptable for input.
        /// </param>
        /// <param name='state'>
        /// Patient's state (2 letter abbreviation)
        /// </param>
        /// <param name='zip'>
        /// Patient's zip. Matching occurs on first 5 characters.
        /// </param>
        /// <param name='sex'>
        /// Patient's sex (M/F)
        /// </param>
        /// <param name='race'>
        /// The patient race, using the 2.16.840.1.113883.5.104 codeset. See
        /// http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special
        /// case: use "declined" to indicate that the patient declined to answer.
        /// Multiple values or a tab-seperated list of codes is acceptable for multiple
        /// races for input. The first race will be considered "primary". Note: you
        /// must update all values at once if you update any.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreatePatientWithHttpMessagesAsync(string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), string dob = default(string), string email = default(string), string firstname = default(string), string homephone = default(string), string lastname = default(string), string mobilephone = default(string), string state = default(string), string zip = default(string), string sex = default(string), string race = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("address1", address1);
                tracingParameters.Add("address2", address2);
                tracingParameters.Add("city", city);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("dob", dob);
                tracingParameters.Add("email", email);
                tracingParameters.Add("firstname", firstname);
                tracingParameters.Add("homephone", homephone);
                tracingParameters.Add("lastname", lastname);
                tracingParameters.Add("mobilephone", mobilephone);
                tracingParameters.Add("state", state);
                tracingParameters.Add("zip", zip);
                tracingParameters.Add("sex", sex);
                tracingParameters.Add("race", race);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreatePatient", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/patients").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            if(address1 != null)
            {
                values.Add(new KeyValuePair<string,string>("address1", address1));
            }
            if(address2 != null)
            {
                values.Add(new KeyValuePair<string,string>("address2", address2));
            }
            if(city != null)
            {
                values.Add(new KeyValuePair<string,string>("city", city));
            }
            if(departmentid != null)
            {
                values.Add(new KeyValuePair<string,string>("departmentid", departmentid?.ToString()));
            }
            if(dob != null)
            {
                values.Add(new KeyValuePair<string,string>("dob", dob));
            }
            if(email != null)
            {
                values.Add(new KeyValuePair<string,string>("email", email));
            }
            if(firstname != null)
            {
                values.Add(new KeyValuePair<string,string>("firstname", firstname));
            }
            if(homephone != null)
            {
                values.Add(new KeyValuePair<string,string>("homephone", homephone));
            }
            if(lastname != null)
            {
                values.Add(new KeyValuePair<string,string>("lastname", lastname));
            }
            if(mobilephone != null)
            {
                values.Add(new KeyValuePair<string,string>("mobilephone", mobilephone));
            }
            if(state != null)
            {
                values.Add(new KeyValuePair<string,string>("state", state));
            }
            if(zip != null)
            {
                values.Add(new KeyValuePair<string,string>("zip", zip));
            }
            if(sex != null)
            {
                values.Add(new KeyValuePair<string,string>("sex", sex));
            }
            if(race != null)
            {
                values.Add(new KeyValuePair<string,string>("race", race));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<PatientCreatedResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get a patients by ID
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get information
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<PatientInformation>>> GetPatientByIdWithHttpMessagesAsync(int patientId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientId", patientId);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatientById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/patients/{patientId}").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{patientId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<PatientInformation>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<PatientInformation>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get information
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<PatientCcdaInformation>>> GetPatientCcdaRecordWithHttpMessagesAsync(int patientId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientId", patientId);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatientCcdaRecord", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/patients/{patientId}/ccda").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{patientId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<PatientCcdaInformation>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<PatientCcdaInformation>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <param name='name'>
        /// Id of the patient for which get information
        /// </param>
        /// <param name='providertype'>
        /// The provider type to filter the results on. Valid provider type values can
        /// be found by using GET /reference/providertypes.
        /// </param>
        /// <param name='showallproviderids'>
        /// In athenaNet's internal data structures, a single provider can be
        /// represented by multiple IDs. These IDs are used in certain external
        /// messages (e.g. HL7) and thus these IDs may need to be known by the API user
        /// as well. When set to true, a list of all of these ancillary IDs will be
        /// provided.
        /// </param>
        /// <param name='showusualdepartmentguessthreshold'>
        /// There are situations where determining where a provider "normally"
        /// practices is desired. Unfortuantely, there is no such concept in athenaNet
        /// since providers often practice in multiple locations. However, we can use
        /// some intelligence to determine this by looking back over the previous few
        /// months (90 days) to see actual practice. To enable this, set this value
        /// between 0 and 1; it is highly recommended to be at least .5. This is the
        /// ratio of appointments in a given department to the total number of
        /// appointments for that provider. A value of .5 means "the provider's
        /// appointments are 50% in the department guessed." Setting this to 1 would
        /// only return a department if ALL of the provider's appointments were in one
        /// department.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ProvidersInformationList>> GetProvidersWithHttpMessagesAsync(string name = default(string), string providertype = default(string), bool? showallproviderids = default(bool?), int? showusualdepartmentguessthreshold = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("name", name);
                tracingParameters.Add("providertype", providertype);
                tracingParameters.Add("showallproviderids", showallproviderids);
                tracingParameters.Add("showusualdepartmentguessthreshold", showusualdepartmentguessthreshold);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetProviders", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/providers").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (name != null)
            {
                _queryParameters.Add(string.Format("name={0}", System.Uri.EscapeDataString(name)));
            }
            if (providertype != null)
            {
                _queryParameters.Add(string.Format("providertype={0}", System.Uri.EscapeDataString(providertype)));
            }
            if (showallproviderids != null)
            {
                _queryParameters.Add(string.Format("showallproviderids={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showallproviderids, SerializationSettings).Trim('"'))));
            }
            if (showusualdepartmentguessthreshold != null)
            {
                _queryParameters.Add(string.Format("showusualdepartmentguessthreshold={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showusualdepartmentguessthreshold, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ProvidersInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ProvidersInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <param name='billable'>
        /// This provider is a supervising provider and is credentialed to bill for
        /// services.
        /// </param>
        /// <param name='entitytypeid'>
        /// The entity type of provider. 1 = person, 2 = non-person
        /// </param>
        /// <param name='medicalgroupid'>
        /// The medical group of the provider.
        /// </param>
        /// <param name='providergroupid'>
        /// The provider group of the provider.
        /// </param>
        /// <param name='schedulingname'>
        /// The scheduling name of the provider.
        /// </param>
        /// <param name='signatureonfileflag'>
        /// This provider's signature is on file.
        /// </param>
        /// <param name='alternatephone'>
        /// The phone number of the provider.
        /// </param>
        /// <param name='ansicode'>
        /// The provider taxonomy code of the provider.
        /// </param>
        /// <param name='billednamecase'>
        /// The billing name of the provider.
        /// </param>
        /// <param name='communicatordisplayname'>
        /// The communicator display name for the provider.
        /// </param>
        /// <param name='communicatorhomedepartment'>
        /// The communicator home department for the provider.
        /// </param>
        /// <param name='crdreferring'>
        /// This provider is a Coordinator referring provider.
        /// </param>
        /// <param name='createencounteroncheckin'>
        /// Automatically create encounters at check-in.
        /// </param>
        /// <param name='directaddress'>
        /// The direct email address for the provider.
        /// </param>
        /// <param name='firstname'>
        /// The first name of the provider.
        /// </param>
        /// <param name='hideinportal'>
        /// Hide this provider in the Patient Portal.
        /// </param>
        /// <param name='lastname'>
        /// The last name of the provider.
        /// </param>
        /// <param name='middleinitial'>
        /// The middle name of the provider.
        /// </param>
        /// <param name='namesuffix'>
        /// The suffix of the provider.
        /// </param>
        /// <param name='ndctatnumber'>
        /// The NDC TAT number for this provider.
        /// </param>
        /// <param name='npinumber'>
        /// The NPI of the provider.
        /// </param>
        /// <param name='practiceroleid'>
        /// The practice role ID for the provider.
        /// </param>
        /// <param name='providerprofileid'>
        /// The provider profile of the provider (integer or 'NEW')
        /// </param>
        /// <param name='providertype'>
        /// The abbreviation for the provider type of the provider. (e.g., MD, NP). See
        /// GET /reference/providertypes for a mapping of abbreviation to provider
        /// type.
        /// </param>
        /// <param name='reportingname'>
        /// The reporting name for the provider.
        /// </param>
        /// <param name='scheduleresourcetypeid'>
        /// The scheduling resource type id of the provider.
        /// </param>
        /// <param name='schedulingnote'>
        /// The scheduling note for the provider.
        /// </param>
        /// <param name='sex'>
        /// The sex of the provider (M or F)
        /// </param>
        /// <param name='specialtyid'>
        /// The specialty ID of the provider. See GET /reference/providerspecialties
        /// for a mapping of ID to specialty name.
        /// </param>
        /// <param name='ssn'>
        /// The SSN of the provider.
        /// </param>
        /// <param name='staffbucket'>
        /// Create a staff bucket for this provider.
        /// </param>
        /// <param name='supervisingproviderid'>
        /// The supervising provider ID for this provider.
        /// </param>
        /// <param name='supervisingprovidertype'>
        /// If set to self,set supervisingprovider to itself.
        /// </param>
        /// <param name='trackmissingslips'>
        /// This provider renders services that should be tracked on the Missing Slips
        /// Worklist.
        /// </param>
        /// <param name='username'>
        /// The username for the provider.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateProviderWithHttpMessagesAsync(bool billable, int entitytypeid, int medicalgroupid, int providergroupid, string schedulingname, bool signatureonfileflag, string alternatephone = default(string), string ansicode = default(string), string billednamecase = default(string), string communicatordisplayname = default(string), int? communicatorhomedepartment = default(int?), bool? crdreferring = default(bool?), bool? createencounteroncheckin = default(bool?), string directaddress = default(string), string firstname = default(string), bool? hideinportal = default(bool?), string lastname = default(string), string middleinitial = default(string), string namesuffix = default(string), string ndctatnumber = default(string), int? npinumber = default(int?), int? practiceroleid = default(int?), string providerprofileid = default(string), string providertype = default(string), string reportingname = default(string), int? scheduleresourcetypeid = default(int?), string schedulingnote = default(string), string sex = default(string), string specialtyid = default(string), int? ssn = default(int?), bool? staffbucket = default(bool?), int? supervisingproviderid = default(int?), string supervisingprovidertype = default(string), bool? trackmissingslips = default(bool?), string username = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (schedulingname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "schedulingname");
            }
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("alternatephone", alternatephone);
                tracingParameters.Add("ansicode", ansicode);
                tracingParameters.Add("billable", billable);
                tracingParameters.Add("billednamecase", billednamecase);
                tracingParameters.Add("communicatordisplayname", communicatordisplayname);
                tracingParameters.Add("communicatorhomedepartment", communicatorhomedepartment);
                tracingParameters.Add("crdreferring", crdreferring);
                tracingParameters.Add("createencounteroncheckin", createencounteroncheckin);
                tracingParameters.Add("directaddress", directaddress);
                tracingParameters.Add("entitytypeid", entitytypeid);
                tracingParameters.Add("firstname", firstname);
                tracingParameters.Add("hideinportal", hideinportal);
                tracingParameters.Add("lastname", lastname);
                tracingParameters.Add("medicalgroupid", medicalgroupid);
                tracingParameters.Add("middleinitial", middleinitial);
                tracingParameters.Add("namesuffix", namesuffix);
                tracingParameters.Add("ndctatnumber", ndctatnumber);
                tracingParameters.Add("npinumber", npinumber);
                tracingParameters.Add("practiceroleid", practiceroleid);
                tracingParameters.Add("providergroupid", providergroupid);
                tracingParameters.Add("providerprofileid", providerprofileid);
                tracingParameters.Add("providertype", providertype);
                tracingParameters.Add("reportingname", reportingname);
                tracingParameters.Add("scheduleresourcetypeid", scheduleresourcetypeid);
                tracingParameters.Add("schedulingname", schedulingname);
                tracingParameters.Add("schedulingnote", schedulingnote);
                tracingParameters.Add("sex", sex);
                tracingParameters.Add("signatureonfileflag", signatureonfileflag);
                tracingParameters.Add("specialtyid", specialtyid);
                tracingParameters.Add("ssn", ssn);
                tracingParameters.Add("staffbucket", staffbucket);
                tracingParameters.Add("supervisingproviderid", supervisingproviderid);
                tracingParameters.Add("supervisingprovidertype", supervisingprovidertype);
                tracingParameters.Add("trackmissingslips", trackmissingslips);
                tracingParameters.Add("username", username);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateProvider", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/providers").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            if(alternatephone != null)
            {
                values.Add(new KeyValuePair<string,string>("alternatephone", alternatephone));
            }
            if(ansicode != null)
            {
                values.Add(new KeyValuePair<string,string>("ansicode", ansicode));
            }
            values.Add(new KeyValuePair<string,string>("billable", billable.ToString()));
            if(billednamecase != null)
            {
                values.Add(new KeyValuePair<string,string>("billednamecase", billednamecase));
            }
            if(communicatordisplayname != null)
            {
                values.Add(new KeyValuePair<string,string>("communicatordisplayname", communicatordisplayname));
            }
            if(communicatorhomedepartment != null)
            {
                values.Add(new KeyValuePair<string,string>("communicatorhomedepartment", communicatorhomedepartment?.ToString()));
            }
            if(crdreferring != null)
            {
                values.Add(new KeyValuePair<string,string>("crdreferring", crdreferring?.ToString()));
            }
            if(createencounteroncheckin != null)
            {
                values.Add(new KeyValuePair<string,string>("createencounteroncheckin", createencounteroncheckin?.ToString()));
            }
            if(directaddress != null)
            {
                values.Add(new KeyValuePair<string,string>("directaddress", directaddress));
            }
            values.Add(new KeyValuePair<string,string>("entitytypeid", entitytypeid.ToString()));
            if(firstname != null)
            {
                values.Add(new KeyValuePair<string,string>("firstname", firstname));
            }
            if(hideinportal != null)
            {
                values.Add(new KeyValuePair<string,string>("hideinportal", hideinportal?.ToString()));
            }
            if(lastname != null)
            {
                values.Add(new KeyValuePair<string,string>("lastname", lastname));
            }
            values.Add(new KeyValuePair<string,string>("medicalgroupid", medicalgroupid.ToString()));
            if(middleinitial != null)
            {
                values.Add(new KeyValuePair<string,string>("middleinitial", middleinitial));
            }
            if(namesuffix != null)
            {
                values.Add(new KeyValuePair<string,string>("namesuffix", namesuffix));
            }
            if(ndctatnumber != null)
            {
                values.Add(new KeyValuePair<string,string>("ndctatnumber", ndctatnumber));
            }
            if(npinumber != null)
            {
                values.Add(new KeyValuePair<string,string>("npinumber", npinumber?.ToString()));
            }
            if(practiceroleid != null)
            {
                values.Add(new KeyValuePair<string,string>("practiceroleid", practiceroleid?.ToString()));
            }
            values.Add(new KeyValuePair<string,string>("providergroupid", providergroupid.ToString()));
            if(providerprofileid != null)
            {
                values.Add(new KeyValuePair<string,string>("providerprofileid", providerprofileid));
            }
            if(providertype != null)
            {
                values.Add(new KeyValuePair<string,string>("providertype", providertype));
            }
            if(reportingname != null)
            {
                values.Add(new KeyValuePair<string,string>("reportingname", reportingname));
            }
            if(scheduleresourcetypeid != null)
            {
                values.Add(new KeyValuePair<string,string>("scheduleresourcetypeid", scheduleresourcetypeid?.ToString()));
            }
            values.Add(new KeyValuePair<string,string>("schedulingname", schedulingname));
            if(schedulingnote != null)
            {
                values.Add(new KeyValuePair<string,string>("schedulingnote", schedulingnote));
            }
            if(sex != null)
            {
                values.Add(new KeyValuePair<string,string>("sex", sex));
            }
            values.Add(new KeyValuePair<string,string>("signatureonfileflag", signatureonfileflag.ToString()));
            if(specialtyid != null)
            {
                values.Add(new KeyValuePair<string,string>("specialtyid", specialtyid));
            }
            if(ssn != null)
            {
                values.Add(new KeyValuePair<string,string>("ssn", ssn?.ToString()));
            }
            if(staffbucket != null)
            {
                values.Add(new KeyValuePair<string,string>("staffbucket", staffbucket?.ToString()));
            }
            if(supervisingproviderid != null)
            {
                values.Add(new KeyValuePair<string,string>("supervisingproviderid", supervisingproviderid?.ToString()));
            }
            if(supervisingprovidertype != null)
            {
                values.Add(new KeyValuePair<string,string>("supervisingprovidertype", supervisingprovidertype));
            }
            if(trackmissingslips != null)
            {
                values.Add(new KeyValuePair<string,string>("trackmissingslips", trackmissingslips?.ToString()));
            }
            if(username != null)
            {
                values.Add(new KeyValuePair<string,string>("username", username));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<ProviderCreatedResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Information about a single patient's appointment by id
        /// </summary>
        /// <param name='appointmentId'>
        /// Id of the appointment.
        /// </param>
        /// <param name='ignorerestrictions'>
        /// When showing patient detail for appointments, the patient information for
        /// patients with record restrictions and blocked patients will not be shown.
        /// Setting this flag to true will show that information for those patients.
        /// </param>
        /// <param name='showclaimdetail'>
        /// Include claim information, if available, associated with an appointment.
        /// </param>
        /// <param name='showcopay'>
        /// By default, the expected co-pay is returned. For performance purposes, you
        /// can set this to false and copay will not be populated.
        /// </param>
        /// <param name='showexpectedprocedurecodes'>
        /// Show the expetcted procedurecodes.
        /// </param>
        /// <param name='showinsurance'>
        /// Include patient insurance information. Shows insurance packages for the
        /// appointment if any are selected, and all patient packages otherwise.
        /// </param>
        /// <param name='showpatientdetail'>
        /// Include patient information for each patient associated with an
        /// appointment.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<AppointmentInformation>>> GetAppointmentByIdWithHttpMessagesAsync(int appointmentId, bool? ignorerestrictions = default(bool?), bool? showclaimdetail = default(bool?), bool? showcopay = default(bool?), bool? showexpectedprocedurecodes = default(bool?), bool? showinsurance = default(bool?), bool? showpatientdetail = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appointmentId", appointmentId);
                tracingParameters.Add("ignorerestrictions", ignorerestrictions);
                tracingParameters.Add("showclaimdetail", showclaimdetail);
                tracingParameters.Add("showcopay", showcopay);
                tracingParameters.Add("showexpectedprocedurecodes", showexpectedprocedurecodes);
                tracingParameters.Add("showinsurance", showinsurance);
                tracingParameters.Add("showpatientdetail", showpatientdetail);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAppointmentById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/{appointmentId}").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{appointmentId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmentId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (ignorerestrictions != null)
            {
                _queryParameters.Add(string.Format("ignorerestrictions={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(ignorerestrictions, SerializationSettings).Trim('"'))));
            }
            if (showclaimdetail != null)
            {
                _queryParameters.Add(string.Format("showclaimdetail={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showclaimdetail, SerializationSettings).Trim('"'))));
            }
            if (showcopay != null)
            {
                _queryParameters.Add(string.Format("showcopay={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showcopay, SerializationSettings).Trim('"'))));
            }
            if (showexpectedprocedurecodes != null)
            {
                _queryParameters.Add(string.Format("showexpectedprocedurecodes={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showexpectedprocedurecodes, SerializationSettings).Trim('"'))));
            }
            if (showinsurance != null)
            {
                _queryParameters.Add(string.Format("showinsurance={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showinsurance, SerializationSettings).Trim('"'))));
            }
            if (showpatientdetail != null)
            {
                _queryParameters.Add(string.Format("showpatientdetail={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showpatientdetail, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<AppointmentInformation>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<AppointmentInformation>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Set Information about a single patient's appointment by id
        /// </summary>
        /// <param name='patientid'>
        /// The athenaNet patient ID.
        /// </param>
        /// <param name='appointmentId'>
        /// Id of the appointment.
        /// </param>
        /// <param name='appointmenttypeid'>
        /// The appointment type to be booked. This field should never be used for
        /// booking appointments for web-based scheduling. The use of this field is
        /// reserved for digital check-in (aka "kiosk") or an application used by
        /// practice staff. One of this or reasonid is required.
        /// </param>
        /// <param name='bookingnote'>
        /// A note from the patient about why this appointment is being booked
        /// </param>
        /// <param name='departmentid'>
        /// The athenaNet department ID.
        /// </param>
        /// <param name='donotsendconfirmationemail'>
        /// For clients with athenaCommunicator, certain appointment types can be
        /// configured to have an appointment confirmation email sent to the patient at
        /// time of appointment booking. If this parameter is set to true, that email
        /// will not be sent. This should only be used if you plan on sending a
        /// confirmation email via another method.
        /// </param>
        /// <param name='ignoreschedulablepermission'>
        /// By default, we allow booking of appointments marked as schedulable via the
        /// web. This flag allows you to bypass that restriction for booking.
        /// </param>
        /// <param name='insurancecompany'>
        /// The name of the insurance company.
        /// </param>
        /// <param name='insurancegroupid'>
        /// If available, any identifier for the insurance group.
        /// </param>
        /// <param name='insuranceidnumber'>
        /// The insurance identifier for this individual patient.
        /// </param>
        /// <param name='insurancenote'>
        /// Any extra information provided by the patient about insurance coverage.
        /// </param>
        /// <param name='insurancephone'>
        /// The phone number for the insurance company.
        /// </param>
        /// <param name='insuranceplanname'>
        /// The insurance plan name (e.g. "HMO Blue").
        /// </param>
        /// <param name='insurancepolicyholder'>
        /// The full name of the insurance policy holder.
        /// </param>
        /// <param name='nopatientcase'>
        /// By default, we create a patient case upon booking an appointment for new
        /// patients. Setting this to true bypasses that patient case.
        /// </param>
        /// <param name='reasonid'>
        /// The appointment reason ID to be booked. This field is required for booking
        /// appointments for web-based scheduling and is a reason that is retrieved
        /// from the /patientappointmentreasons call.
        /// </param>
        /// <param name='urgentyn'>
        /// Set this field in order to set the urgent flag in athena (if the practice
        /// settings allow for this).
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> BookAppointmentByIdWithHttpMessagesAsync(int patientid, int appointmentId, int? appointmenttypeid = default(int?), string bookingnote = default(string), int? departmentid = default(int?), bool? donotsendconfirmationemail = default(bool?), bool? ignoreschedulablepermission = default(bool?), string insurancecompany = default(string), string insurancegroupid = default(string), string insuranceidnumber = default(string), string insurancenote = default(string), string insurancephone = default(string), string insuranceplanname = default(string), string insurancepolicyholder = default(string), bool? nopatientcase = default(bool?), int? reasonid = default(int?), bool? urgentyn = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientid", patientid);
                tracingParameters.Add("appointmenttypeid", appointmenttypeid);
                tracingParameters.Add("bookingnote", bookingnote);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("donotsendconfirmationemail", donotsendconfirmationemail);
                tracingParameters.Add("ignoreschedulablepermission", ignoreschedulablepermission);
                tracingParameters.Add("insurancecompany", insurancecompany);
                tracingParameters.Add("insurancegroupid", insurancegroupid);
                tracingParameters.Add("insuranceidnumber", insuranceidnumber);
                tracingParameters.Add("insurancenote", insurancenote);
                tracingParameters.Add("insurancephone", insurancephone);
                tracingParameters.Add("insuranceplanname", insuranceplanname);
                tracingParameters.Add("insurancepolicyholder", insurancepolicyholder);
                tracingParameters.Add("nopatientcase", nopatientcase);
                tracingParameters.Add("reasonid", reasonid);
                tracingParameters.Add("urgentyn", urgentyn);
                tracingParameters.Add("appointmentId", appointmentId);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "BookAppointmentById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/{appointmentId}").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{appointmentId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmentId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            values.Add(new KeyValuePair<string,string>("patientid", patientid.ToString()));
            if(appointmenttypeid != null)
            {
                values.Add(new KeyValuePair<string,string>("appointmenttypeid", appointmenttypeid?.ToString()));
            }
            if(bookingnote != null)
            {
                values.Add(new KeyValuePair<string,string>("bookingnote", bookingnote));
            }
            if(departmentid != null)
            {
                values.Add(new KeyValuePair<string,string>("departmentid", departmentid?.ToString()));
            }
            if(donotsendconfirmationemail != null)
            {
                values.Add(new KeyValuePair<string,string>("donotsendconfirmationemail", donotsendconfirmationemail?.ToString()));
            }
            if(ignoreschedulablepermission != null)
            {
                values.Add(new KeyValuePair<string,string>("ignoreschedulablepermission", ignoreschedulablepermission?.ToString()));
            }
            if(insurancecompany != null)
            {
                values.Add(new KeyValuePair<string,string>("insurancecompany", insurancecompany));
            }
            if(insurancegroupid != null)
            {
                values.Add(new KeyValuePair<string,string>("insurancegroupid", insurancegroupid));
            }
            if(insuranceidnumber != null)
            {
                values.Add(new KeyValuePair<string,string>("insuranceidnumber", insuranceidnumber));
            }
            if(insurancenote != null)
            {
                values.Add(new KeyValuePair<string,string>("insurancenote", insurancenote));
            }
            if(insurancephone != null)
            {
                values.Add(new KeyValuePair<string,string>("insurancephone", insurancephone));
            }
            if(insuranceplanname != null)
            {
                values.Add(new KeyValuePair<string,string>("insuranceplanname", insuranceplanname));
            }
            if(insurancepolicyholder != null)
            {
                values.Add(new KeyValuePair<string,string>("insurancepolicyholder", insurancepolicyholder));
            }
            if(nopatientcase != null)
            {
                values.Add(new KeyValuePair<string,string>("nopatientcase", nopatientcase?.ToString()));
            }
            if(reasonid != null)
            {
                values.Add(new KeyValuePair<string,string>("reasonid", reasonid?.ToString()));
            }
            if(urgentyn != null)
            {
                values.Add(new KeyValuePair<string,string>("urgentyn", urgentyn?.ToString()));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<AppointmentInformation>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete information about a single patient's appointment by id. Only open
        /// appointments can be deleted.
        /// </summary>
        /// <param name='appointmentId'>
        /// Id of the appointment.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<int?>>> DeleteAppointmentByIdWithHttpMessagesAsync(int appointmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appointmentId", appointmentId);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteAppointmentById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/{appointmentId}").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{appointmentId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmentId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<int?>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<int?>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <param name='patientid'>
        /// The athenaNet patient ID.
        /// </param>
        /// <param name='appointmentId'>
        /// Id of the appointment.
        /// </param>
        /// <param name='appointmentcancelreasonid'>
        /// Passing in this parameter will override the default cancel reason. Valid
        /// reasons can be retrieved via a call to the GET /appointmentcancelreasons
        /// endpoint.
        /// </param>
        /// <param name='cancellationreason'>
        /// A text explanation why the appointment is being cancelled
        /// </param>
        /// <param name='departmentid'>
        /// The athenaNet department ID.
        /// </param>
        /// <param name='ignoreschedulablepermission'>
        /// By default, we allow booking of appointments marked as schedulable via the
        /// web. This flag allows you to bypass that restriction for booking.
        /// </param>
        /// <param name='nopatientcase'>
        /// By default, we create a patient case upon booking an appointment for new
        /// patients. Setting this to true bypasses that patient case.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CancelAppointmentByIdWithHttpMessagesAsync(int patientid, int appointmentId, int? appointmentcancelreasonid = default(int?), string cancellationreason = default(string), int? departmentid = default(int?), bool? ignoreschedulablepermission = default(bool?), bool? nopatientcase = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientid", patientid);
                tracingParameters.Add("appointmentcancelreasonid", appointmentcancelreasonid);
                tracingParameters.Add("cancellationreason", cancellationreason);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("ignoreschedulablepermission", ignoreschedulablepermission);
                tracingParameters.Add("nopatientcase", nopatientcase);
                tracingParameters.Add("appointmentId", appointmentId);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CancelAppointmentById", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/{appointmentId}/cancel").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{appointmentId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmentId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            values.Add(new KeyValuePair<string,string>("patientid", patientid.ToString()));
            if(appointmentcancelreasonid != null)
            {
                values.Add(new KeyValuePair<string,string>("appointmentcancelreasonid", appointmentcancelreasonid?.ToString()));
            }
            if(cancellationreason != null)
            {
                values.Add(new KeyValuePair<string,string>("cancellationreason", cancellationreason));
            }
            if(departmentid != null)
            {
                values.Add(new KeyValuePair<string,string>("departmentid", departmentid?.ToString()));
            }
            if(ignoreschedulablepermission != null)
            {
                values.Add(new KeyValuePair<string,string>("ignoreschedulablepermission", ignoreschedulablepermission?.ToString()));
            }
            if(nopatientcase != null)
            {
                values.Add(new KeyValuePair<string,string>("nopatientcase", nopatientcase?.ToString()));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 409)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<OperationStatusData>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 409)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <param name='appointmentstatus'>
        /// Filter appointments by status.
        /// </param>
        /// <param name='appointmenttypeid'>
        /// Filter by appointment type ID.
        /// </param>
        /// <param name='departmentid'>
        /// The athenaNet department ID.
        /// </param>
        /// <param name='enddate'>
        /// End of the appointment search date range (mm/dd/yyyy). Inclusive.
        /// </param>
        /// <param name='endlastmodified'>
        /// Identify appointments modified prior to this date/time (mm/dd/yyyy
        /// hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified
        /// value is supplied as well.
        /// </param>
        /// <param name='ignorerestrictions'>
        /// When showing patient detail for appointments, the patient information for
        /// patients with record restrictions and blocked patients will not be shown.
        /// Setting this flag to true will show that information for those patients.
        /// </param>
        /// <param name='patientid'>
        /// The athenaNet patient ID. If operating in a Provider Group Enterprise
        /// practice, this should be the enterprise patient ID.
        /// </param>
        /// <param name='providerid'>
        /// The athenaNet provider ID. Multiple IDs (either as a comma delimited list
        /// or multiple POSTed values) are allowed.
        /// </param>
        /// <param name='scheduledenddate'>
        /// End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive.
        /// </param>
        /// <param name='scheduledstartdate'>
        /// Start of the appointment scheduled search date range (mm/dd/yyyy).
        /// Inclusive.
        /// </param>
        /// <param name='showcancelled'>
        /// Include appointments that have been cancelled.
        /// </param>
        /// <param name='showclaimdetail'>
        /// Include claim information, if available, associated with an appointment.
        /// </param>
        /// <param name='showcopay'>
        /// By default, the expected co-pay is returned. For performance purposes, you
        /// can set this to false and copay will not be populated.
        /// </param>
        /// <param name='showexpectedprocedurecodes'>
        /// Show the expetcted procedurecodes.
        /// </param>
        /// <param name='showinsurance'>
        /// Include patient insurance information. Shows insurance packages for the
        /// appointment if any are selected, and all patient packages otherwise.
        /// </param>
        /// <param name='showpatientdetail'>
        /// Include patient information for each patient associated with an
        /// appointment.
        /// </param>
        /// <param name='showremindercalldetail'>
        /// Include all remindercall related results, if available, associated with an
        /// appointment.
        /// </param>
        /// <param name='startdate'>
        /// Start of the appointment search date range (mm/dd/yyyy). Inclusive.
        /// </param>
        /// <param name='startlastmodified'>
        /// Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss).
        /// Inclusive.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppointmentInformationList>> GetBookedAppointmentsWithHttpMessagesAsync(string appointmentstatus = default(string), int? appointmenttypeid = default(int?), int? departmentid = default(int?), string enddate = default(string), string endlastmodified = default(string), bool? ignorerestrictions = default(bool?), int? patientid = default(int?), string providerid = default(string), string scheduledenddate = default(string), string scheduledstartdate = default(string), bool? showcancelled = default(bool?), bool? showclaimdetail = default(bool?), bool? showcopay = default(bool?), bool? showexpectedprocedurecodes = default(bool?), bool? showinsurance = default(bool?), bool? showpatientdetail = default(bool?), bool? showremindercalldetail = default(bool?), string startdate = default(string), string startlastmodified = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appointmentstatus", appointmentstatus);
                tracingParameters.Add("appointmenttypeid", appointmenttypeid);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("enddate", enddate);
                tracingParameters.Add("endlastmodified", endlastmodified);
                tracingParameters.Add("ignorerestrictions", ignorerestrictions);
                tracingParameters.Add("patientid", patientid);
                tracingParameters.Add("providerid", providerid);
                tracingParameters.Add("scheduledenddate", scheduledenddate);
                tracingParameters.Add("scheduledstartdate", scheduledstartdate);
                tracingParameters.Add("showcancelled", showcancelled);
                tracingParameters.Add("showclaimdetail", showclaimdetail);
                tracingParameters.Add("showcopay", showcopay);
                tracingParameters.Add("showexpectedprocedurecodes", showexpectedprocedurecodes);
                tracingParameters.Add("showinsurance", showinsurance);
                tracingParameters.Add("showpatientdetail", showpatientdetail);
                tracingParameters.Add("showremindercalldetail", showremindercalldetail);
                tracingParameters.Add("startdate", startdate);
                tracingParameters.Add("startlastmodified", startlastmodified);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBookedAppointments", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/booked").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (appointmentstatus != null)
            {
                _queryParameters.Add(string.Format("appointmentstatus={0}", System.Uri.EscapeDataString(appointmentstatus)));
            }
            if (appointmenttypeid != null)
            {
                _queryParameters.Add(string.Format("appointmenttypeid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmenttypeid, SerializationSettings).Trim('"'))));
            }
            if (departmentid != null)
            {
                _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            }
            if (enddate != null)
            {
                _queryParameters.Add(string.Format("enddate={0}", System.Uri.EscapeDataString(enddate)));
            }
            if (endlastmodified != null)
            {
                _queryParameters.Add(string.Format("endlastmodified={0}", System.Uri.EscapeDataString(endlastmodified)));
            }
            if (ignorerestrictions != null)
            {
                _queryParameters.Add(string.Format("ignorerestrictions={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(ignorerestrictions, SerializationSettings).Trim('"'))));
            }
            if (patientid != null)
            {
                _queryParameters.Add(string.Format("patientid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientid, SerializationSettings).Trim('"'))));
            }
            if (providerid != null)
            {
                _queryParameters.Add(string.Format("providerid={0}", System.Uri.EscapeDataString(providerid)));
            }
            if (scheduledenddate != null)
            {
                _queryParameters.Add(string.Format("scheduledenddate={0}", System.Uri.EscapeDataString(scheduledenddate)));
            }
            if (scheduledstartdate != null)
            {
                _queryParameters.Add(string.Format("scheduledstartdate={0}", System.Uri.EscapeDataString(scheduledstartdate)));
            }
            if (showcancelled != null)
            {
                _queryParameters.Add(string.Format("showcancelled={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showcancelled, SerializationSettings).Trim('"'))));
            }
            if (showclaimdetail != null)
            {
                _queryParameters.Add(string.Format("showclaimdetail={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showclaimdetail, SerializationSettings).Trim('"'))));
            }
            if (showcopay != null)
            {
                _queryParameters.Add(string.Format("showcopay={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showcopay, SerializationSettings).Trim('"'))));
            }
            if (showexpectedprocedurecodes != null)
            {
                _queryParameters.Add(string.Format("showexpectedprocedurecodes={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showexpectedprocedurecodes, SerializationSettings).Trim('"'))));
            }
            if (showinsurance != null)
            {
                _queryParameters.Add(string.Format("showinsurance={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showinsurance, SerializationSettings).Trim('"'))));
            }
            if (showpatientdetail != null)
            {
                _queryParameters.Add(string.Format("showpatientdetail={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showpatientdetail, SerializationSettings).Trim('"'))));
            }
            if (showremindercalldetail != null)
            {
                _queryParameters.Add(string.Format("showremindercalldetail={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showremindercalldetail, SerializationSettings).Trim('"'))));
            }
            if (startdate != null)
            {
                _queryParameters.Add(string.Format("startdate={0}", System.Uri.EscapeDataString(startdate)));
            }
            if (startlastmodified != null)
            {
                _queryParameters.Add(string.Format("startlastmodified={0}", System.Uri.EscapeDataString(startlastmodified)));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<AppointmentInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AppointmentInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <param name='appointmenttypeid'>
        /// Normally, an appointment reason ID should be used which will map to the
        /// correct underlying appointment type in athenaNet. This field will ignore
        /// the practice's existing setup for what should be scheduled. Please consult
        /// with athenahealth before using. Either an appointmenttypeid or a reasonid
        /// must be specified or no results will be returned.
        /// </param>
        /// <param name='bypassscheduletimechecks'>
        /// Bypass checks that usually require returned appointments to be some amount
        /// of hours in the future (as configured by the practice, defaulting to 24
        /// hours), and also ignores the setting that only  shows appointments for a
        /// certain number of days in the future (also configurable by the practice,
        /// defaulting to 90 days).
        /// </param>
        /// <param name='departmentid'>
        /// The athenaNet department ID.
        /// </param>
        /// <param name='enddate'>
        /// End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults
        /// to seven days from startdate.
        /// </param>
        /// <param name='ignoreschedulablepermission'>
        /// By default, we show only appointments that are are available to scheduled
        /// via the API. This flag allows you to bypass that restriction for viewing
        /// available appointments (but you still may not be able to schedule based on
        /// this permission!). This flag does not, however, show the full schedule
        /// (that is, appointments that are already booked).
        /// </param>
        /// <param name='providerid'>
        /// The athenaNet provider ID. Required if a reasonid other than -1 is
        /// specified.
        /// </param>
        /// <param name='reasonid'>
        /// The athenaNet patient appointment reason ID, from GET
        /// /patientappointmentreasons. While this is not technically required due to
        /// some unusual use cases, it is highly recommended for most calls. We do
        /// allow a special value of -1 for the reasonid. This reasonid will return
        /// open, web-schedulable slots regardless of reason. However, slots returned
        /// using a search of -1 may return slots that are not bookable by any reason
        /// ID (they may be bookable by specific appointment type IDs instead). This
        /// argument allows multiple valid reason IDs to be specified (e.g.
        /// reasonid=1,2,3), so if you are looking for slots that match "any" reason,
        /// it is recommended that you enumerate the set of reasons you are looking
        /// for. Either a reasonid or an appointmenttypeid must be specified or no
        /// results will be returned. If a reasonid other than -1 is specified then a
        /// providerid must also be specified.
        /// </param>
        /// <param name='showfrozenslots'>
        /// By default, we hide appointments that are frozen from being returned via
        /// the API.  This flag allows you to show frozen slots in the set of results
        /// returned.
        /// </param>
        /// <param name='startdate'>
        /// Start of the appointment search date range (mm/dd/yyyy). Inclusive.
        /// Defaults to today.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppointmentInformationList>> GetOpenAppointmentsWithHttpMessagesAsync(int? appointmenttypeid = default(int?), bool? bypassscheduletimechecks = default(bool?), int? departmentid = default(int?), string enddate = default(string), bool? ignoreschedulablepermission = default(bool?), string providerid = default(string), string reasonid = default(string), bool? showfrozenslots = default(bool?), string startdate = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appointmenttypeid", appointmenttypeid);
                tracingParameters.Add("bypassscheduletimechecks", bypassscheduletimechecks);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("enddate", enddate);
                tracingParameters.Add("ignoreschedulablepermission", ignoreschedulablepermission);
                tracingParameters.Add("providerid", providerid);
                tracingParameters.Add("reasonid", reasonid);
                tracingParameters.Add("showfrozenslots", showfrozenslots);
                tracingParameters.Add("startdate", startdate);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetOpenAppointments", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/open").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (appointmenttypeid != null)
            {
                _queryParameters.Add(string.Format("appointmenttypeid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(appointmenttypeid, SerializationSettings).Trim('"'))));
            }
            if (bypassscheduletimechecks != null)
            {
                _queryParameters.Add(string.Format("bypassscheduletimechecks={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(bypassscheduletimechecks, SerializationSettings).Trim('"'))));
            }
            if (departmentid != null)
            {
                _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            }
            if (enddate != null)
            {
                _queryParameters.Add(string.Format("enddate={0}", System.Uri.EscapeDataString(enddate)));
            }
            if (ignoreschedulablepermission != null)
            {
                _queryParameters.Add(string.Format("ignoreschedulablepermission={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(ignoreschedulablepermission, SerializationSettings).Trim('"'))));
            }
            if (providerid != null)
            {
                _queryParameters.Add(string.Format("providerid={0}", System.Uri.EscapeDataString(providerid)));
            }
            if (reasonid != null)
            {
                _queryParameters.Add(string.Format("reasonid={0}", System.Uri.EscapeDataString(reasonid)));
            }
            if (showfrozenslots != null)
            {
                _queryParameters.Add(string.Format("showfrozenslots={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showfrozenslots, SerializationSettings).Trim('"'))));
            }
            if (startdate != null)
            {
                _queryParameters.Add(string.Format("startdate={0}", System.Uri.EscapeDataString(startdate)));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<AppointmentInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AppointmentInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <param name='appointmentdate'>
        /// The appointment date for the new open appointment slot (mm/dd/yyyy).
        /// </param>
        /// <param name='appointmenttime'>
        /// The time (hh24:mi) for the new appointment slot. Multiple times (either as
        /// a comma delimited list or multiple POSTed values) are allowed. 24 hour
        /// time.
        /// </param>
        /// <param name='departmentid'>
        /// The athenaNet department ID.
        /// </param>
        /// <param name='providerid'>
        /// The athenaNet provider ID.
        /// </param>
        /// <param name='appointmenttypeid'>
        /// The appointment type ID to be created. Either this or a reason must be
        /// provided.
        /// </param>
        /// <param name='reasonid'>
        /// The appointment reason (/patientappointmentreasons) to be created. Either
        /// this or a raw appointment type ID must be provided.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> OpenNewAppointmentWithHttpMessagesAsync(string appointmentdate, string appointmenttime, int departmentid, int providerid, int? appointmenttypeid = default(int?), int? reasonid = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (appointmentdate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "appointmentdate");
            }
            if (appointmenttime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "appointmenttime");
            }
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("appointmentdate", appointmentdate);
                tracingParameters.Add("appointmenttime", appointmenttime);
                tracingParameters.Add("appointmenttypeid", appointmenttypeid);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("providerid", providerid);
                tracingParameters.Add("reasonid", reasonid);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "OpenNewAppointment", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointments/open").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            values.Add(new KeyValuePair<string,string>("appointmentdate", appointmentdate));
            values.Add(new KeyValuePair<string,string>("appointmenttime", appointmenttime));
            if(appointmenttypeid != null)
            {
                values.Add(new KeyValuePair<string,string>("appointmenttypeid", appointmenttypeid?.ToString()));
            }
            values.Add(new KeyValuePair<string,string>("departmentid", departmentid.ToString()));
            values.Add(new KeyValuePair<string,string>("providerid", providerid.ToString()));
            if(reasonid != null)
            {
                values.Add(new KeyValuePair<string,string>("reasonid", reasonid?.ToString()));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PathsapivariantPracticeidAppointmentsOpenpostresponses200contentapplicationJsonschema>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <param name='hidegeneric'>
        /// By default, we show both generic and non-generic types. Setting this to
        /// true will hide the generic types (and show only non-generic types).
        /// </param>
        /// <param name='hidenongeneric'>
        /// By default, we show both generic and non-generic types. Setting this to
        /// true will hide non-generic types (and show only generic types).
        /// </param>
        /// <param name='hidenonpatient'>
        /// This defaults to true if not specified, and thus will hide non-patient
        /// facing types. Setting this to false would thus show non-patient facing
        /// types.
        /// </param>
        /// <param name='hidetemplatetypeonly'>
        /// By default, we show both "template only" and not-template only types.
        /// Setting this to true, the results will omit template only types. ("Template
        /// only" is a setting that makes the type appear in schedules, but forces
        /// users to select a non-template type upon booking.)
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<AppointmentTypeInformationList>> GetAppointmentTypesWithHttpMessagesAsync(bool? hidegeneric = default(bool?), bool? hidenongeneric = default(bool?), bool? hidenonpatient = default(bool?), bool? hidetemplatetypeonly = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("hidegeneric", hidegeneric);
                tracingParameters.Add("hidenongeneric", hidenongeneric);
                tracingParameters.Add("hidenonpatient", hidenonpatient);
                tracingParameters.Add("hidetemplatetypeonly", hidetemplatetypeonly);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAppointmentTypes", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointmenttypes").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (hidegeneric != null)
            {
                _queryParameters.Add(string.Format("hidegeneric={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(hidegeneric, SerializationSettings).Trim('"'))));
            }
            if (hidenongeneric != null)
            {
                _queryParameters.Add(string.Format("hidenongeneric={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(hidenongeneric, SerializationSettings).Trim('"'))));
            }
            if (hidenonpatient != null)
            {
                _queryParameters.Add(string.Format("hidenonpatient={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(hidenonpatient, SerializationSettings).Trim('"'))));
            }
            if (hidetemplatetypeonly != null)
            {
                _queryParameters.Add(string.Format("hidetemplatetypeonly={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(hidetemplatetypeonly, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<AppointmentTypeInformationList>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<AppointmentTypeInformationList>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <param name='duration'>
        /// The expected duration, in minutes, of the appointment type. Note, this
        /// value cannot be changed after creation, so please choose carefully.
        /// </param>
        /// <param name='name'>
        /// The name of the appointment type. Maximum length of 30 characters.
        /// </param>
        /// <param name='patient'>
        /// If set to true, this type serves as a "patient" type, meaning that is is a
        /// type that can be used for booking patients. If set to false, then it this
        /// type will not be used for patient (e.g. "Lunch" or "Vacation"). Non-patient
        /// types are mostly used to reserving time for providers to not see patients.
        /// </param>
        /// <param name='shortname'>
        /// The short name code of the appointment type. Maximum length of 4
        /// characters. Used for making schedule templates. Note, this value cannot be
        /// changed after creation, so please choose carefully.
        /// </param>
        /// <param name='generic'>
        /// If set to true, this type serves as a "generic" type, that will match any
        /// type when searching. Defaults to false.
        /// </param>
        /// <param name='templatetypeonly'>
        /// If set to true, this type serves as a "template-only" type, meaning that it
        /// can be used for building schedule templates,  but cannot be used for
        /// booking appointments (i.e. another type must be chosen). Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CreateAppointmentTypeWithHttpMessagesAsync(int duration, string name, bool patient, string shortname, bool? generic = default(bool?), bool? templatetypeonly = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "name");
            }
            if (name != null)
            {
                if (name.Length > 30)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "name", 30);
                }
            }
            if (shortname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "shortname");
            }
            if (shortname != null)
            {
                if (shortname.Length > 4)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "shortname", 4);
                }
            }
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("duration", duration);
                tracingParameters.Add("generic", generic);
                tracingParameters.Add("name", name);
                tracingParameters.Add("patient", patient);
                tracingParameters.Add("shortname", shortname);
                tracingParameters.Add("templatetypeonly", templatetypeonly);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateAppointmentType", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/appointmenttypes").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            var values = new List<KeyValuePair<string, string>>();
            values.Add(new KeyValuePair<string,string>("duration", duration.ToString()));
            if(generic != null)
            {
                values.Add(new KeyValuePair<string,string>("generic", generic?.ToString()));
            }
            values.Add(new KeyValuePair<string,string>("name", name));
            values.Add(new KeyValuePair<string,string>("patient", patient.ToString()));
            values.Add(new KeyValuePair<string,string>("shortname", shortname));
            if(templatetypeonly != null)
            {
                values.Add(new KeyValuePair<string,string>("templatetypeonly", templatetypeonly?.ToString()));
            }
            var _formContent = new FormUrlEncodedContent(values);
            _httpRequest.Content = _formContent;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PathsapivariantPracticeidAppointmenttypespostresponses200contentapplicationJsonschema>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get medications
        /// </param>
        /// <param name='departmentid'>
        /// The athenanet department ID
        /// </param>
        /// <param name='medicationtype'>
        /// Historical or Active or Denied. Will return a list of a patient's active or
        /// historical or denied medications.
        /// </param>
        /// <param name='showndc'>
        /// Shows the list of NDC numbers related to the medication.
        /// </param>
        /// <param name='showpend'>
        /// Include pending medications associated with approved future orders. These
        /// medications have not yet been submitted.
        /// </param>
        /// <param name='showrxnorm'>
        /// Shows the list of RxNorm Identifiers related to the medication. The list
        /// may contain both branded and generic identifiers.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PatientMedicationInformation>> GetPatientMedicationsWithHttpMessagesAsync(int patientId, int departmentid, string medicationtype = default(string), bool? showndc = default(bool?), bool? showpend = default(bool?), bool? showrxnorm = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientId", patientId);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("medicationtype", medicationtype);
                tracingParameters.Add("showndc", showndc);
                tracingParameters.Add("showpend", showpend);
                tracingParameters.Add("showrxnorm", showrxnorm);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatientMedications", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/chart/{patientId}/medications").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{patientId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            if (medicationtype != null)
            {
                _queryParameters.Add(string.Format("medicationtype={0}", System.Uri.EscapeDataString(medicationtype)));
            }
            if (showndc != null)
            {
                _queryParameters.Add(string.Format("showndc={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showndc, SerializationSettings).Trim('"'))));
            }
            if (showpend != null)
            {
                _queryParameters.Add(string.Format("showpend={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showpend, SerializationSettings).Trim('"'))));
            }
            if (showrxnorm != null)
            {
                _queryParameters.Add(string.Format("showrxnorm={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showrxnorm, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PatientMedicationInformation>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PatientMedicationInformation>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get medications
        /// </param>
        /// <param name='departmentid'>
        /// The athenanet department ID
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<PatientMedicalHistory>> GetPatientMedicalHistoryWithHttpMessagesAsync(int patientId, int departmentid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientId", patientId);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatientMedicalHistory", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/chart/{patientId}/medicalhistory").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{patientId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<PatientMedicalHistory>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<PatientMedicalHistory>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get medications
        /// </param>
        /// <param name='departmentid'>
        /// The athenanet department ID
        /// </param>
        /// <param name='allresultsbyencounterid'>
        /// ID used to return lab results for a specific encounter.
        /// </param>
        /// <param name='analyteresultstatus'>
        /// Filter the results based on the analyte's result status. Since the result
        /// status is a free text field, this list is not exhaustive, but does
        /// represent a majority of the used statuses.
        /// </param>
        /// <param name='enddate'>
        /// Filter lab orders not individual results that are on or before this date.
        /// Example: enddate=1/21/2018. If no enddate is specified, all lab orders
        /// found since startdate will be included if specified.
        /// </param>
        /// <param name='labresultstatus'>
        /// Filter the results based on the lab result's result status. Since the
        /// result status is a free text field, this list is not exhaustive, but does
        /// represent a majority of the used statuses.
        /// </param>
        /// <param name='showabnormaldetails'>
        /// Include the translation of the abnormalflag into HL7 code standards.
        /// </param>
        /// <param name='showhidden'>
        /// Includes the lab results and analytes marked as hidden. Hidden lab results
        /// and analytes are created when they are manually entered, for example on the
        /// qm tab or in flowsheets.
        /// </param>
        /// <param name='showtemplate'>
        /// If true, interpretation template added to the document is also returned.
        /// </param>
        /// <param name='startdate'>
        /// Filter lab orders not individual results that are on or after this date.
        /// Example: startdate=6/21/2015. If no startdate is specified, all prior lab
        /// orders will be included until enddate if specified.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<AnalytesList>>> GetPatientMedicalHistory1WithHttpMessagesAsync(int patientId, int departmentid, int? allresultsbyencounterid = default(int?), string analyteresultstatus = default(string), string enddate = default(string), string labresultstatus = default(string), bool? showabnormaldetails = default(bool?), bool? showhidden = default(bool?), bool? showtemplate = default(bool?), string startdate = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Apivariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Apivariant");
            }
            string apiVersion = "1.0.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("patientId", patientId);
                tracingParameters.Add("departmentid", departmentid);
                tracingParameters.Add("allresultsbyencounterid", allresultsbyencounterid);
                tracingParameters.Add("analyteresultstatus", analyteresultstatus);
                tracingParameters.Add("enddate", enddate);
                tracingParameters.Add("labresultstatus", labresultstatus);
                tracingParameters.Add("showabnormaldetails", showabnormaldetails);
                tracingParameters.Add("showhidden", showhidden);
                tracingParameters.Add("showtemplate", showtemplate);
                tracingParameters.Add("startdate", startdate);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPatientMedicalHistory1", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{apivariant}/{practiceid}/chart/{patientId}/analytes").ToString();
            _url = _url.Replace("{practiceid}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(Practiceid, SerializationSettings).Trim('"')));
            _url = _url.Replace("{apivariant}", System.Uri.EscapeDataString(Apivariant));
            _url = _url.Replace("{patientId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(patientId, SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            _queryParameters.Add(string.Format("departmentid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(departmentid, SerializationSettings).Trim('"'))));
            if (allresultsbyencounterid != null)
            {
                _queryParameters.Add(string.Format("allresultsbyencounterid={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(allresultsbyencounterid, SerializationSettings).Trim('"'))));
            }
            if (analyteresultstatus != null)
            {
                _queryParameters.Add(string.Format("analyteresultstatus={0}", System.Uri.EscapeDataString(analyteresultstatus)));
            }
            if (enddate != null)
            {
                _queryParameters.Add(string.Format("enddate={0}", System.Uri.EscapeDataString(enddate)));
            }
            if (labresultstatus != null)
            {
                _queryParameters.Add(string.Format("labresultstatus={0}", System.Uri.EscapeDataString(labresultstatus)));
            }
            if (showabnormaldetails != null)
            {
                _queryParameters.Add(string.Format("showabnormaldetails={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showabnormaldetails, SerializationSettings).Trim('"'))));
            }
            if (showhidden != null)
            {
                _queryParameters.Add(string.Format("showhidden={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showhidden, SerializationSettings).Trim('"'))));
            }
            if (showtemplate != null)
            {
                _queryParameters.Add(string.Format("showtemplate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(showtemplate, SerializationSettings).Trim('"'))));
            }
            if (startdate != null)
            {
                _queryParameters.Add(string.Format("startdate={0}", System.Uri.EscapeDataString(startdate)));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    Error _errorBody =  SafeJsonConvert.DeserializeObject<Error>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<AnalytesList>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<AnalytesList>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
