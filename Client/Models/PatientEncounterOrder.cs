// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PatientEncounterOrder
    {
        /// <summary>
        /// Initializes a new instance of the PatientEncounterOrder class.
        /// </summary>
        public PatientEncounterOrder()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PatientEncounterOrder class.
        /// </summary>
        /// <param name="declinedreason">List of codes indicating why the order
        /// was not given. If this field is not present, the order was not
        /// declined. If the array is empty, no reason has been chosen.
        /// </param>
        /// <param name="contraindicationreason">List of codes indicating why
        /// the order was contraindicated (for vaccines only). If this field is
        /// not present, the order does not contain a contraindication reason.
        /// </param>
        /// <param name="externalcodes">When available, contains how this order
        /// maps to external vocabularies like LOINC, CVX, SNOMED, RXNORM, etc.
        /// </param>
        /// <param name="createduser">The username of the person who created
        /// the order.</param>
        /// <param name="lastmodifiedby">The username of the person who last
        /// modified the order.</param>
        /// <param name="lastmodifieddatetime">The date this order was last
        /// modified.</param>
        /// <param name="orderid">The order (aka document) ID for this
        /// order.</param>
        /// <param name="declinedreasontext">The user-facing description of the
        /// reason the order was not given.</param>
        /// <param name="description">A human readable description for this
        /// order</param>
        /// <param name="classProperty">The primary class of this order --
        /// PRESCRIPTION, VACCINE, LAB, IMAGING, PATIENTINFO, etc.
        /// </param>
        /// <param name="classdescription">The human-readable description of
        /// this document class, including sub class (prescription - new vs.
        /// prescription - renewal).
        /// </param>
        /// <param name="ordertypeid">The athena ID for this type of order. Can
        /// be used to create another order of this type.</param>
        /// <param name="ordertype">The type of this order (Lab, Vaccine,
        /// etc.)</param>
        /// <param name="dateordered">The timestamp when the order was
        /// created.</param>
        /// <param name="orderingprovider">The username of the ordering
        /// provider, which is different than the ordering user -- who may be
        /// an intake nurse for example.
        /// </param>
        /// <param name="assigneduser">The username of the user who this order
        /// task is currently assigned to for further processing as
        /// needed.</param>
        /// <param name="priority">Priority of a order.</param>
        /// <param name="status">The status the document is in (PEND, CLOSED,
        /// SUBMIT, SUBMITTED, etc).
        /// </param>
        /// <param name="documentationonly">If true, this order is here just as
        /// a record, and does not need to actually go out.</param>
        /// <param name="quantityvalue">The dosage quantity value.</param>
        /// <param name="refills">The number of refills allowed.</param>
        /// <param name="futuresubmitdate">The date this order will be
        /// submitted.</param>
        /// <param name="ndc">The National Drug Code for the order</param>
        public PatientEncounterOrder(IList<CodeInformation> declinedreason = default(IList<CodeInformation>), IList<CodeInformation> contraindicationreason = default(IList<CodeInformation>), IList<CodeInformation> externalcodes = default(IList<CodeInformation>), string createduser = default(string), string lastmodifiedby = default(string), string lastmodifieddatetime = default(string), int? orderid = default(int?), string declinedreasontext = default(string), string description = default(string), string classProperty = default(string), string classdescription = default(string), int? ordertypeid = default(int?), string ordertype = default(string), string dateordered = default(string), string orderingprovider = default(string), string assigneduser = default(string), int? priority = default(int?), string status = default(string), bool? documentationonly = default(bool?), string quantityvalue = default(string), string refills = default(string), string futuresubmitdate = default(string), string ndc = default(string))
        {
            Declinedreason = declinedreason;
            Contraindicationreason = contraindicationreason;
            Externalcodes = externalcodes;
            Createduser = createduser;
            Lastmodifiedby = lastmodifiedby;
            Lastmodifieddatetime = lastmodifieddatetime;
            Orderid = orderid;
            Declinedreasontext = declinedreasontext;
            Description = description;
            ClassProperty = classProperty;
            Classdescription = classdescription;
            Ordertypeid = ordertypeid;
            Ordertype = ordertype;
            Dateordered = dateordered;
            Orderingprovider = orderingprovider;
            Assigneduser = assigneduser;
            Priority = priority;
            Status = status;
            Documentationonly = documentationonly;
            Quantityvalue = quantityvalue;
            Refills = refills;
            Futuresubmitdate = futuresubmitdate;
            Ndc = ndc;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of codes indicating why the order was not given.
        /// If this field is not present, the order was not declined. If the
        /// array is empty, no reason has been chosen.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "declinedreason")]
        public IList<CodeInformation> Declinedreason { get; set; }

        /// <summary>
        /// Gets or sets list of codes indicating why the order was
        /// contraindicated (for vaccines only). If this field is not present,
        /// the order does not contain a contraindication reason.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "contraindicationreason")]
        public IList<CodeInformation> Contraindicationreason { get; set; }

        /// <summary>
        /// Gets or sets when available, contains how this order maps to
        /// external vocabularies like LOINC, CVX, SNOMED, RXNORM, etc.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "externalcodes")]
        public IList<CodeInformation> Externalcodes { get; set; }

        /// <summary>
        /// Gets or sets the username of the person who created the order.
        /// </summary>
        [JsonProperty(PropertyName = "createduser")]
        public string Createduser { get; set; }

        /// <summary>
        /// Gets or sets the username of the person who last modified the
        /// order.
        /// </summary>
        [JsonProperty(PropertyName = "lastmodifiedby")]
        public string Lastmodifiedby { get; set; }

        /// <summary>
        /// Gets or sets the date this order was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "lastmodifieddatetime")]
        public string Lastmodifieddatetime { get; set; }

        /// <summary>
        /// Gets or sets the order (aka document) ID for this order.
        /// </summary>
        [JsonProperty(PropertyName = "orderid")]
        public int? Orderid { get; set; }

        /// <summary>
        /// Gets or sets the user-facing description of the reason the order
        /// was not given.
        /// </summary>
        [JsonProperty(PropertyName = "declinedreasontext")]
        public string Declinedreasontext { get; set; }

        /// <summary>
        /// Gets or sets a human readable description for this order
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the primary class of this order -- PRESCRIPTION,
        /// VACCINE, LAB, IMAGING, PATIENTINFO, etc.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "class")]
        public string ClassProperty { get; set; }

        /// <summary>
        /// Gets or sets the human-readable description of this document class,
        /// including sub class (prescription - new vs. prescription -
        /// renewal).
        ///
        /// </summary>
        [JsonProperty(PropertyName = "classdescription")]
        public string Classdescription { get; set; }

        /// <summary>
        /// Gets or sets the athena ID for this type of order. Can be used to
        /// create another order of this type.
        /// </summary>
        [JsonProperty(PropertyName = "ordertypeid")]
        public int? Ordertypeid { get; set; }

        /// <summary>
        /// Gets or sets the type of this order (Lab, Vaccine, etc.)
        /// </summary>
        [JsonProperty(PropertyName = "ordertype")]
        public string Ordertype { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when the order was created.
        /// </summary>
        [JsonProperty(PropertyName = "dateordered")]
        public string Dateordered { get; set; }

        /// <summary>
        /// Gets or sets the username of the ordering provider, which is
        /// different than the ordering user -- who may be an intake nurse for
        /// example.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "orderingprovider")]
        public string Orderingprovider { get; set; }

        /// <summary>
        /// Gets or sets the username of the user who this order task is
        /// currently assigned to for further processing as needed.
        /// </summary>
        [JsonProperty(PropertyName = "assigneduser")]
        public string Assigneduser { get; set; }

        /// <summary>
        /// Gets or sets priority of a order.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets the status the document is in (PEND, CLOSED, SUBMIT,
        /// SUBMITTED, etc).
        ///
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets if true, this order is here just as a record, and does
        /// not need to actually go out.
        /// </summary>
        [JsonProperty(PropertyName = "documentationonly")]
        public bool? Documentationonly { get; set; }

        /// <summary>
        /// Gets or sets the dosage quantity value.
        /// </summary>
        [JsonProperty(PropertyName = "quantityvalue")]
        public string Quantityvalue { get; set; }

        /// <summary>
        /// Gets or sets the number of refills allowed.
        /// </summary>
        [JsonProperty(PropertyName = "refills")]
        public string Refills { get; set; }

        /// <summary>
        /// Gets or sets the date this order will be submitted.
        /// </summary>
        [JsonProperty(PropertyName = "futuresubmitdate")]
        public string Futuresubmitdate { get; set; }

        /// <summary>
        /// Gets or sets the National Drug Code for the order
        /// </summary>
        [JsonProperty(PropertyName = "ndc")]
        public string Ndc { get; set; }

    }
}
