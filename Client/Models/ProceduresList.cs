// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ProceduresList
    {
        /// <summary>
        /// Initializes a new instance of the ProceduresList class.
        /// </summary>
        public ProceduresList()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProceduresList class.
        /// </summary>
        /// <param name="sectionnote">Additional note for the entire surgical
        /// history section, if any</param>
        public ProceduresList(IList<PatientProcedure> procedures, string sectionnote = default(string))
        {
            Sectionnote = sectionnote;
            Procedures = procedures;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets additional note for the entire surgical history
        /// section, if any
        /// </summary>
        [JsonProperty(PropertyName = "sectionnote")]
        public string Sectionnote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "procedures")]
        public IList<PatientProcedure> Procedures { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Procedures == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Procedures");
            }
            if (Procedures != null)
            {
                foreach (var element in Procedures)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
