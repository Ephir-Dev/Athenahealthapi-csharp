// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PatientEncounter
    {
        /// <summary>
        /// Initializes a new instance of the PatientEncounter class.
        /// </summary>
        public PatientEncounter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PatientEncounter class.
        /// </summary>
        /// <param name="diagnoses">List of diagnoses for this
        /// encounter</param>
        /// <param name="lastreopened">The date the encounter was last
        /// reopened. The field will not be present if the encounter has not be
        /// closed.
        /// </param>
        /// <param name="departmentid">The athena department ID of this
        /// encounter</param>
        /// <param name="appointmentid">Athena appointment ID resulting in this
        /// encounter</param>
        /// <param name="encounterid">Athena ID for this encounter</param>
        /// <param name="encountervisitname">The visit name for this
        /// encounter</param>
        /// <param name="encountertype">Type of encounter (FLOWSHEET,
        /// ORDERSONLY, VISIT, etc.). By default only VISIT and ORDERSONLY are
        /// shown, use INCLUDEALLtypeS flag to see others.
        /// </param>
        /// <param name="status">Status of this encounter (CLOSED, OPEN, PEND).
        /// By default only OPEN, CLOSED, and REVIEW statuses are shown, use
        /// INCLUDEALLSTATUSES flag to see others.
        /// </param>
        /// <param name="patientlocationid">Athena ID for the patient
        /// location</param>
        /// <param name="patientlocation">Patient location</param>
        /// <param name="patientstatusid">Athena ID for the patient
        /// status</param>
        /// <param name="patientstatus">Patient status</param>
        /// <param name="encounterdate">Date when this encounter
        /// occured</param>
        /// <param name="stage">Last stage of the encounter</param>
        /// <param name="providerid">The ID of the provider for this
        /// encounter</param>
        /// <param name="providerfirstname">First name of the provider for this
        /// encounter</param>
        /// <param name="providerlastname">Last name of the provider for this
        /// encounter</param>
        /// <param name="providerphone">Phone number of the provider for this
        /// encounter</param>
        /// <param name="lastupdated">The date the encounter was last
        /// updated</param>
        public PatientEncounter(IList<PatientEncounterDiagnosis> diagnoses = default(IList<PatientEncounterDiagnosis>), string lastreopened = default(string), int? departmentid = default(int?), int? appointmentid = default(int?), int? encounterid = default(int?), string encountervisitname = default(string), string encountertype = default(string), string status = default(string), int? patientlocationid = default(int?), string patientlocation = default(string), int? patientstatusid = default(int?), string patientstatus = default(string), string encounterdate = default(string), string stage = default(string), int? providerid = default(int?), string providerfirstname = default(string), string providerlastname = default(string), string providerphone = default(string), string lastupdated = default(string))
        {
            Diagnoses = diagnoses;
            Lastreopened = lastreopened;
            Departmentid = departmentid;
            Appointmentid = appointmentid;
            Encounterid = encounterid;
            Encountervisitname = encountervisitname;
            Encountertype = encountertype;
            Status = status;
            Patientlocationid = patientlocationid;
            Patientlocation = patientlocation;
            Patientstatusid = patientstatusid;
            Patientstatus = patientstatus;
            Encounterdate = encounterdate;
            Stage = stage;
            Providerid = providerid;
            Providerfirstname = providerfirstname;
            Providerlastname = providerlastname;
            Providerphone = providerphone;
            Lastupdated = lastupdated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of diagnoses for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "diagnoses")]
        public IList<PatientEncounterDiagnosis> Diagnoses { get; set; }

        /// <summary>
        /// Gets or sets the date the encounter was last reopened. The field
        /// will not be present if the encounter has not be closed.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "lastreopened")]
        public string Lastreopened { get; set; }

        /// <summary>
        /// Gets or sets the athena department ID of this encounter
        /// </summary>
        [JsonProperty(PropertyName = "departmentid")]
        public int? Departmentid { get; set; }

        /// <summary>
        /// Gets or sets athena appointment ID resulting in this encounter
        /// </summary>
        [JsonProperty(PropertyName = "appointmentid")]
        public int? Appointmentid { get; set; }

        /// <summary>
        /// Gets or sets athena ID for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "encounterid")]
        public int? Encounterid { get; set; }

        /// <summary>
        /// Gets or sets the visit name for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "encountervisitname")]
        public string Encountervisitname { get; set; }

        /// <summary>
        /// Gets or sets type of encounter (FLOWSHEET, ORDERSONLY, VISIT,
        /// etc.). By default only VISIT and ORDERSONLY are shown, use
        /// INCLUDEALLtypeS flag to see others.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "encountertype")]
        public string Encountertype { get; set; }

        /// <summary>
        /// Gets or sets status of this encounter (CLOSED, OPEN, PEND). By
        /// default only OPEN, CLOSED, and REVIEW statuses are shown, use
        /// INCLUDEALLSTATUSES flag to see others.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets athena ID for the patient location
        /// </summary>
        [JsonProperty(PropertyName = "patientlocationid")]
        public int? Patientlocationid { get; set; }

        /// <summary>
        /// Gets or sets patient location
        /// </summary>
        [JsonProperty(PropertyName = "patientlocation")]
        public string Patientlocation { get; set; }

        /// <summary>
        /// Gets or sets athena ID for the patient status
        /// </summary>
        [JsonProperty(PropertyName = "patientstatusid")]
        public int? Patientstatusid { get; set; }

        /// <summary>
        /// Gets or sets patient status
        /// </summary>
        [JsonProperty(PropertyName = "patientstatus")]
        public string Patientstatus { get; set; }

        /// <summary>
        /// Gets or sets date when this encounter occured
        /// </summary>
        [JsonProperty(PropertyName = "encounterdate")]
        public string Encounterdate { get; set; }

        /// <summary>
        /// Gets or sets last stage of the encounter
        /// </summary>
        [JsonProperty(PropertyName = "stage")]
        public string Stage { get; set; }

        /// <summary>
        /// Gets or sets the ID of the provider for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "providerid")]
        public int? Providerid { get; set; }

        /// <summary>
        /// Gets or sets first name of the provider for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "providerfirstname")]
        public string Providerfirstname { get; set; }

        /// <summary>
        /// Gets or sets last name of the provider for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "providerlastname")]
        public string Providerlastname { get; set; }

        /// <summary>
        /// Gets or sets phone number of the provider for this encounter
        /// </summary>
        [JsonProperty(PropertyName = "providerphone")]
        public string Providerphone { get; set; }

        /// <summary>
        /// Gets or sets the date the encounter was last updated
        /// </summary>
        [JsonProperty(PropertyName = "lastupdated")]
        public string Lastupdated { get; set; }

    }
}
