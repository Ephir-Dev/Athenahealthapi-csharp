// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CodeInformation
    {
        /// <summary>
        /// Initializes a new instance of the CodeInformation class.
        /// </summary>
        public CodeInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CodeInformation class.
        /// </summary>
        /// <param name="codeset">Codeset for this code (ICD9 or ICD10)</param>
        /// <param name="code">Actual ICD code for this diagnosis</param>
        /// <param name="description">Brief description for this code</param>
        public CodeInformation(string codeset, string code, string description = default(string))
        {
            Codeset = codeset;
            Code = code;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets codeset for this code (ICD9 or ICD10)
        /// </summary>
        [JsonProperty(PropertyName = "codeset")]
        public string Codeset { get; set; }

        /// <summary>
        /// Gets or sets actual ICD code for this diagnosis
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets brief description for this code
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Codeset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Codeset");
            }
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
        }
    }
}
