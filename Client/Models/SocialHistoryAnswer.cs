// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SocialHistoryAnswer
    {
        /// <summary>
        /// Initializes a new instance of the SocialHistoryAnswer class.
        /// </summary>
        public SocialHistoryAnswer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SocialHistoryAnswer class.
        /// </summary>
        /// <param name="answer">The patient answer to this question</param>
        /// <param name="questionid">Unique ID for this question within this
        /// template.</param>
        /// <param name="key">Unique key for this question, can exist in
        /// multiple templates.</param>
        /// <param name="question">Human readable question</param>
        /// <param name="ordering">Display ordering for this question within
        /// this template</param>
        /// <param name="templateid">The template where this question is
        /// listed. If it exists on multiple templates, then only one of
        /// them.</param>
        /// <param name="note">The notes associated with this question.</param>
        /// <param name="lastupdated">The date this answer was last updated (or
        /// first answered if never updated).</param>
        /// <param name="notelastupdateddate">The date this note was last
        /// updated (or first added if never updated).</param>
        public SocialHistoryAnswer(string answer = default(string), int? questionid = default(int?), string key = default(string), string question = default(string), int? ordering = default(int?), int? templateid = default(int?), string note = default(string), string lastupdated = default(string), string notelastupdateddate = default(string))
        {
            Answer = answer;
            Questionid = questionid;
            Key = key;
            Question = question;
            Ordering = ordering;
            Templateid = templateid;
            Note = note;
            Lastupdated = lastupdated;
            Notelastupdateddate = notelastupdateddate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the patient answer to this question
        /// </summary>
        [JsonProperty(PropertyName = "answer")]
        public string Answer { get; set; }

        /// <summary>
        /// Gets or sets unique ID for this question within this template.
        /// </summary>
        [JsonProperty(PropertyName = "questionid")]
        public int? Questionid { get; set; }

        /// <summary>
        /// Gets or sets unique key for this question, can exist in multiple
        /// templates.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets human readable question
        /// </summary>
        [JsonProperty(PropertyName = "question")]
        public string Question { get; set; }

        /// <summary>
        /// Gets or sets display ordering for this question within this
        /// template
        /// </summary>
        [JsonProperty(PropertyName = "ordering")]
        public int? Ordering { get; set; }

        /// <summary>
        /// Gets or sets the template where this question is listed. If it
        /// exists on multiple templates, then only one of them.
        /// </summary>
        [JsonProperty(PropertyName = "templateid")]
        public int? Templateid { get; set; }

        /// <summary>
        /// Gets or sets the notes associated with this question.
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the date this answer was last updated (or first
        /// answered if never updated).
        /// </summary>
        [JsonProperty(PropertyName = "lastupdated")]
        public string Lastupdated { get; set; }

        /// <summary>
        /// Gets or sets the date this note was last updated (or first added if
        /// never updated).
        /// </summary>
        [JsonProperty(PropertyName = "notelastupdateddate")]
        public string Notelastupdateddate { get; set; }

    }
}
