// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Analyte
    {
        /// <summary>
        /// Initializes a new instance of the Analyte class.
        /// </summary>
        public Analyte()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Analyte class.
        /// </summary>
        /// <param name="analyteId">Athena ID for the given lab result
        /// observation/analyte</param>
        /// <param name="analytename">Name / description specific to this
        /// analyte</param>
        /// <param name="loinc">Logical Observation Identifiers Names and Codes
        /// ID, if available</param>
        /// <param name="value">Value recorded for this observation</param>
        /// <param name="units">Units for this analyte entry, if provided by
        /// the lab</param>
        /// <param name="analytedate">Date when this observation was
        /// recorded</param>
        /// <param name="description">General description of the lab result
        /// test</param>
        /// <param name="note">Additional note for this analyte, if
        /// applicable</param>
        /// <param name="abnormalflag">Status indicator of the measurement
        /// relative to normal (low, high, normal, abnormal)</param>
        /// <param name="abnormalhl7code">The HL7 code related to the abnormal
        /// flag.</param>
        /// <param name="abnormalhl7name">The HL7 description related to the
        /// abnormal flag.</param>
        /// <param name="valuestatus">DEPRECATED -- use "abnormalflag" instead.
        /// Status indicator of the measurement relative to normal (low, high,
        /// normal, abnormal)</param>
        /// <param name="referencerange">Reference range of values accepted as
        /// normal for this observation</param>
        /// <param name="resultstatus">The status of the result (e.g., "final",
        /// "preliminary", "corrected", etc.)</param>
        /// <param name="labresultstatus">The status of the underlying lab
        /// result</param>
        public Analyte(int? analyteId = default(int?), string analytename = default(string), string loinc = default(string), string value = default(string), string units = default(string), string analytedate = default(string), string description = default(string), string note = default(string), string abnormalflag = default(string), string abnormalhl7code = default(string), string abnormalhl7name = default(string), string valuestatus = default(string), string referencerange = default(string), string resultstatus = default(string), string labresultstatus = default(string))
        {
            AnalyteId = analyteId;
            Analytename = analytename;
            Loinc = loinc;
            Value = value;
            Units = units;
            Analytedate = analytedate;
            Description = description;
            Note = note;
            Abnormalflag = abnormalflag;
            Abnormalhl7code = abnormalhl7code;
            Abnormalhl7name = abnormalhl7name;
            Valuestatus = valuestatus;
            Referencerange = referencerange;
            Resultstatus = resultstatus;
            Labresultstatus = labresultstatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets athena ID for the given lab result observation/analyte
        /// </summary>
        [JsonProperty(PropertyName = "analyteid")]
        public int? AnalyteId { get; set; }

        /// <summary>
        /// Gets or sets name / description specific to this analyte
        /// </summary>
        [JsonProperty(PropertyName = "analytename")]
        public string Analytename { get; set; }

        /// <summary>
        /// Gets or sets logical Observation Identifiers Names and Codes ID, if
        /// available
        /// </summary>
        [JsonProperty(PropertyName = "loinc")]
        public string Loinc { get; set; }

        /// <summary>
        /// Gets or sets value recorded for this observation
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets units for this analyte entry, if provided by the lab
        /// </summary>
        [JsonProperty(PropertyName = "units")]
        public string Units { get; set; }

        /// <summary>
        /// Gets or sets date when this observation was recorded
        /// </summary>
        [JsonProperty(PropertyName = "analytedate")]
        public string Analytedate { get; set; }

        /// <summary>
        /// Gets or sets general description of the lab result test
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets additional note for this analyte, if applicable
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets status indicator of the measurement relative to normal
        /// (low, high, normal, abnormal)
        /// </summary>
        [JsonProperty(PropertyName = "abnormalflag")]
        public string Abnormalflag { get; set; }

        /// <summary>
        /// Gets or sets the HL7 code related to the abnormal flag.
        /// </summary>
        [JsonProperty(PropertyName = "abnormalhl7code")]
        public string Abnormalhl7code { get; set; }

        /// <summary>
        /// Gets or sets the HL7 description related to the abnormal flag.
        /// </summary>
        [JsonProperty(PropertyName = "abnormalhl7name")]
        public string Abnormalhl7name { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED -- use "abnormalflag" instead. Status
        /// indicator of the measurement relative to normal (low, high, normal,
        /// abnormal)
        /// </summary>
        [JsonProperty(PropertyName = "valuestatus")]
        public string Valuestatus { get; set; }

        /// <summary>
        /// Gets or sets reference range of values accepted as normal for this
        /// observation
        /// </summary>
        [JsonProperty(PropertyName = "referencerange")]
        public string Referencerange { get; set; }

        /// <summary>
        /// Gets or sets the status of the result (e.g., "final",
        /// "preliminary", "corrected", etc.)
        /// </summary>
        [JsonProperty(PropertyName = "resultstatus")]
        public string Resultstatus { get; set; }

        /// <summary>
        /// Gets or sets the status of the underlying lab result
        /// </summary>
        [JsonProperty(PropertyName = "labresultstatus")]
        public string Labresultstatus { get; set; }

    }
}
