// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AppointmentInformation
    {
        /// <summary>
        /// Initializes a new instance of the AppointmentInformation class.
        /// </summary>
        public AppointmentInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppointmentInformation class.
        /// </summary>
        /// <param name="reasonId">A list of reason IDs that could be used for
        /// this slot. Only present if multiple reason IDs are
        /// requested.</param>
        /// <param name="appointmentnotes">message</param>
        /// <param name="appointmentstatus">The athenaNet appointment status.
        /// There are several possible statuses. x=cancelled. f=future. (It can
        /// include appointments where were never checked in, even if the
        /// appointment date is in the past. It is up to a practice to cancel
        /// appointments as a no show when appropriate to do so.) o=open.
        /// 2=checked in. 3=checked out. 4=charge entered (i.e. a past
        /// appointment).
        /// </param>
        /// <param name="cancelleddatetime">The time (mm/dd/yyyy hh24:mi:ss;
        /// Eastern time) that this appointment was cancelled (if
        /// cancelled)</param>
        /// <param name="chargeentrynotrequired">This field will tell if an
        /// appointment has been marked as not requiring change entry.</param>
        /// <param name="hl7providerid">This is the raw provider ID that should
        /// be used ONLY if using this appointment in conjunction with an HL7
        /// message and with athenahealth's prior guidance. It is only
        /// available in some situations.</param>
        /// <param name="cancelreasonname">If the appointment was cancelled,
        /// the name (local to the practice) for the cancel reason.
        /// </param>
        /// <param name="chargeentrynotrequiredreason">This field will give the
        /// reason that an appointment has been marked as not requiring charge
        /// entry.</param>
        /// <param name="lastmodified">The date/time when the appointment was
        /// last modified. Note: It may be possible for the lastmodified field
        /// to be updated without any other field in the API call being
        /// changed. This occurs when appointment fields not included in the
        /// API output are updated.
        /// </param>
        /// <param name="departmentid">Id of the department</param>
        /// <param name="checkoutdatetime">The time (mm/dd/yyyy hh24:mi:ss)
        /// that the appointment was checked out.</param>
        /// <param name="copay">Expected copay for this appointment. Based on
        /// the appointment type, the patient's primary insurance, and any
        /// copays collected. To see the amounts used in this calculated value,
        /// see the APPOINTMENTCOPAY fields.
        /// </param>
        /// <param name="encounterid">The encounter id associated with this
        /// appointment, useful for certain other calls. Only present for
        /// appointments with Clinicals that have been checked in.
        /// </param>
        /// <param name="scheduledby">The username who scheduled the
        /// appointment.</param>
        /// <param name="checkindatetime">The time (mm/dd/yyyy hh24:mi:ss) that
        /// the appointment was checked in.</param>
        /// <param name="cancelledby">If the appointment has been cancelled,
        /// the username who cancelled the appointment.
        /// </param>
        /// <param name="stopintakedatetime">The time (mm/dd/yyyy hh24:mi:ss)
        /// that the intake process was completed.</param>
        /// <param name="encounterstatus">The status of this patient in the
        /// encounter (READYFORSTAFF, WITHSTAFF, READFORPROVIDER, CHECKEDOUT).
        /// Only present for appointments with Clinicals that have been checked
        /// in.
        /// </param>
        /// <param name="frozenyn">If true, this appointment slot is frozen
        /// </param>
        /// <param name="appointmenttype">The practice-friendly (not patient
        /// friendly) name for this appointment type. Note that this may not be
        /// the same as the booked appointment because of "generic" slots.
        /// </param>
        /// <param name="appointmenttypeid">This is the ID for the appointment
        /// type. Note that this may not be the same as the booked appointment
        /// because of "generic" slots.</param>
        /// <param name="cancelreasonid">If the appointment was cancelled, the
        /// numeric ID (local to the practice) for the cancel reason.</param>
        /// <param name="cancelreasonnoshow">If the appointment was cancelled,
        /// if the cancel reason is marked as a no show reason.</param>
        /// <param name="cancelreasonslotavailable">If the appointment was
        /// cancelled, if the cancel reason is marked as a slot available
        /// reason.</param>
        /// <param name="coordinatorenterpriseyn">If true, the appointment was
        /// booked through athenaCoordinator Enterprise.</param>
        /// <param name="duration">In minutes</param>
        /// <param name="scheduleddatetime">The time (mm/dd/yyyy hh24:mi:ss;
        /// Eastern time) that this appointment was scheduled.</param>
        /// <param name="urgentyn">Urgent flag for the appointment.</param>
        /// <param name="startcheckin">The timestamp when the appointment
        /// started the check in process. If this is set while an appointment
        /// is still in status 'f', it means that the check-in process has
        /// begun but is not yet completed.
        /// </param>
        /// <param name="appointmentconfirmationid">If there is an appointment
        /// confirmation result for this appointment, the numeric ID (global to
        /// athenaNet).</param>
        /// <param name="suggestedoverbooking">High risk score for Smart
        /// Scheduling</param>
        /// <param name="appointmentcopay">Detailed information about the copay
        /// for this appointment. Gives more detail than the COPAY field. Note:
        /// this information is not yet available in all practices, we are
        /// rolling this out slowly.
        /// </param>
        /// <param name="appointmentid">Appointment ID of the booked
        /// appointment</param>
        /// <param name="date">The appointment date.</param>
        /// <param name="patient">See /patients for details</param>
        /// <param name="startcheckoutdatetime">The time (mm/dd/yyyy
        /// hh24:mi:ss) that the appointment check-out was started.</param>
        /// <param name="appointmentconfirmationname">If there is an
        /// appointment confirmation result for this appointment, the name
        /// (global to athenaNet).</param>
        /// <param name="useexpectedprocedurecodes">An array of expected
        /// procedure codes attached to this appointment.</param>
        /// <param name="lastmodifiedby">The user who last modified the
        /// appointment.</param>
        /// <param name="patientappointmenttypename">The patient-friendly name
        /// for this appointment type. Note that this may not be the same as
        /// the booked appointment because of "generic" slots.</param>
        /// <param name="starttime">As HH:MM (where HH is the 0-23 hour and MM
        /// is the minute). This time is local to the department.</param>
        /// <param name="stopcheckin">The timestamp when the check-in process
        /// was finished for this appointment.</param>
        /// <param name="providerid">Id of the provider</param>
        /// <param name="stopexamdatetime">The time (mm/dd/yyyy hh24:mi:ss)
        /// that the exam was completed.</param>
        /// <param name="renderingproviderid">The rendering provider
        /// ID.</param>
        /// <param name="supervisingproviderid">The supervising provider
        /// ID.</param>
        /// <param name="claims">As detailed in /claims, if requested.</param>
        /// <param name="patientlocationid">The location of the patient. See
        /// /patientlocation for practice list. Only present for appointments
        /// with Clinicals that have been checked in.</param>
        /// <param name="encounterstate">The status of the clinical encounter
        /// associated with this appointment (OPEN, CLOSED, DELETED, PEND,
        /// etc.). This differs from encounterstatus, which refers to the
        /// status of the patient in the encounter.
        /// </param>
        /// <param name="rescheduledappointmentid">When an appointment is
        /// rescheduled, this is the ID of the replacement appointment.</param>
        /// <param name="referringproviderid">The referring provider
        /// ID.</param>
        /// <param name="reminderdetails">Detailed ReminderCall information
        /// made for this appointment.</param>
        /// <param name="templateappointmenttypeid">The original appointment
        /// type for this slot. This can change for generic
        /// appointments.</param>
        /// <param name="templateappointmentid">The original appointment ID.
        /// This is useful if an appointment has been cancelled and you want to
        /// find the original ID.</param>
        /// <param name="patientid">The athenaNet patient ID for this
        /// appointment</param>
        public AppointmentInformation(int? reasonId = default(int?), IList<AppointmentNoteInformation> appointmentnotes = default(IList<AppointmentNoteInformation>), string appointmentstatus = default(string), string cancelleddatetime = default(string), bool? chargeentrynotrequired = default(bool?), int? hl7providerid = default(int?), string cancelreasonname = default(string), string chargeentrynotrequiredreason = default(string), string lastmodified = default(string), int? departmentid = default(int?), string checkoutdatetime = default(string), string copay = default(string), string encounterid = default(string), string scheduledby = default(string), string checkindatetime = default(string), string cancelledby = default(string), string stopintakedatetime = default(string), string encounterstatus = default(string), bool? frozenyn = default(bool?), string appointmenttype = default(string), int? appointmenttypeid = default(int?), int? cancelreasonid = default(int?), bool? cancelreasonnoshow = default(bool?), bool? cancelreasonslotavailable = default(bool?), bool? coordinatorenterpriseyn = default(bool?), int? duration = default(int?), string scheduleddatetime = default(string), bool? urgentyn = default(bool?), string startcheckin = default(string), int? appointmentconfirmationid = default(int?), string suggestedoverbooking = default(string), IList<AppointmentCopayInformation> appointmentcopay = default(IList<AppointmentCopayInformation>), int? appointmentid = default(int?), string date = default(string), string patient = default(string), string startcheckoutdatetime = default(string), string appointmentconfirmationname = default(string), IList<ProcedureCode> useexpectedprocedurecodes = default(IList<ProcedureCode>), string lastmodifiedby = default(string), string patientappointmenttypename = default(string), string starttime = default(string), string stopcheckin = default(string), int? providerid = default(int?), string stopexamdatetime = default(string), int? renderingproviderid = default(int?), string supervisingproviderid = default(string), IList<AppointmentClaim> claims = default(IList<AppointmentClaim>), int? patientlocationid = default(int?), string encounterstate = default(string), int? rescheduledappointmentid = default(int?), int? referringproviderid = default(int?), IList<MessageResult> reminderdetails = default(IList<MessageResult>), int? templateappointmenttypeid = default(int?), int? templateappointmentid = default(int?), int? patientid = default(int?))
        {
            ReasonId = reasonId;
            Appointmentnotes = appointmentnotes;
            Appointmentstatus = appointmentstatus;
            Cancelleddatetime = cancelleddatetime;
            Chargeentrynotrequired = chargeentrynotrequired;
            Hl7providerid = hl7providerid;
            Cancelreasonname = cancelreasonname;
            Chargeentrynotrequiredreason = chargeentrynotrequiredreason;
            Lastmodified = lastmodified;
            Departmentid = departmentid;
            Checkoutdatetime = checkoutdatetime;
            Copay = copay;
            Encounterid = encounterid;
            Scheduledby = scheduledby;
            Checkindatetime = checkindatetime;
            Cancelledby = cancelledby;
            Stopintakedatetime = stopintakedatetime;
            Encounterstatus = encounterstatus;
            Frozenyn = frozenyn;
            Appointmenttype = appointmenttype;
            Appointmenttypeid = appointmenttypeid;
            Cancelreasonid = cancelreasonid;
            Cancelreasonnoshow = cancelreasonnoshow;
            Cancelreasonslotavailable = cancelreasonslotavailable;
            Coordinatorenterpriseyn = coordinatorenterpriseyn;
            Duration = duration;
            Scheduleddatetime = scheduleddatetime;
            Urgentyn = urgentyn;
            Startcheckin = startcheckin;
            Appointmentconfirmationid = appointmentconfirmationid;
            Suggestedoverbooking = suggestedoverbooking;
            Appointmentcopay = appointmentcopay;
            Appointmentid = appointmentid;
            Date = date;
            Patient = patient;
            Startcheckoutdatetime = startcheckoutdatetime;
            Appointmentconfirmationname = appointmentconfirmationname;
            Useexpectedprocedurecodes = useexpectedprocedurecodes;
            Lastmodifiedby = lastmodifiedby;
            Patientappointmenttypename = patientappointmenttypename;
            Starttime = starttime;
            Stopcheckin = stopcheckin;
            Providerid = providerid;
            Stopexamdatetime = stopexamdatetime;
            Renderingproviderid = renderingproviderid;
            Supervisingproviderid = supervisingproviderid;
            Claims = claims;
            Patientlocationid = patientlocationid;
            Encounterstate = encounterstate;
            Rescheduledappointmentid = rescheduledappointmentid;
            Referringproviderid = referringproviderid;
            Reminderdetails = reminderdetails;
            Templateappointmenttypeid = templateappointmenttypeid;
            Templateappointmentid = templateappointmentid;
            Patientid = patientid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of reason IDs that could be used for this slot.
        /// Only present if multiple reason IDs are requested.
        /// </summary>
        [JsonProperty(PropertyName = "reasonid")]
        public int? ReasonId { get; set; }

        /// <summary>
        /// Gets or sets message
        /// </summary>
        [JsonProperty(PropertyName = "appointmentnotes")]
        public IList<AppointmentNoteInformation> Appointmentnotes { get; set; }

        /// <summary>
        /// Gets or sets the athenaNet appointment status. There are several
        /// possible statuses. x=cancelled. f=future. (It can include
        /// appointments where were never checked in, even if the appointment
        /// date is in the past. It is up to a practice to cancel appointments
        /// as a no show when appropriate to do so.) o=open. 2=checked in.
        /// 3=checked out. 4=charge entered (i.e. a past appointment).
        ///
        /// </summary>
        [JsonProperty(PropertyName = "appointmentstatus")]
        public string Appointmentstatus { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss; Eastern time) that
        /// this appointment was cancelled (if cancelled)
        /// </summary>
        [JsonProperty(PropertyName = "cancelleddatetime")]
        public string Cancelleddatetime { get; set; }

        /// <summary>
        /// Gets or sets this field will tell if an appointment has been marked
        /// as not requiring change entry.
        /// </summary>
        [JsonProperty(PropertyName = "chargeentrynotrequired")]
        public bool? Chargeentrynotrequired { get; set; }

        /// <summary>
        /// Gets or sets this is the raw provider ID that should be used ONLY
        /// if using this appointment in conjunction with an HL7 message and
        /// with athenahealth's prior guidance. It is only available in some
        /// situations.
        /// </summary>
        [JsonProperty(PropertyName = "hl7providerid")]
        public int? Hl7providerid { get; set; }

        /// <summary>
        /// Gets or sets if the appointment was cancelled, the name (local to
        /// the practice) for the cancel reason.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "cancelreasonname")]
        public string Cancelreasonname { get; set; }

        /// <summary>
        /// Gets or sets this field will give the reason that an appointment
        /// has been marked as not requiring charge entry.
        /// </summary>
        [JsonProperty(PropertyName = "chargeentrynotrequiredreason")]
        public string Chargeentrynotrequiredreason { get; set; }

        /// <summary>
        /// Gets or sets the date/time when the appointment was last modified.
        /// Note: It may be possible for the lastmodified field to be updated
        /// without any other field in the API call being changed. This occurs
        /// when appointment fields not included in the API output are updated.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "lastmodified")]
        public string Lastmodified { get; set; }

        /// <summary>
        /// Gets or sets id of the department
        /// </summary>
        [JsonProperty(PropertyName = "departmentid")]
        public int? Departmentid { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss) that the appointment
        /// was checked out.
        /// </summary>
        [JsonProperty(PropertyName = "checkoutdatetime")]
        public string Checkoutdatetime { get; set; }

        /// <summary>
        /// Gets or sets expected copay for this appointment. Based on the
        /// appointment type, the patient's primary insurance, and any copays
        /// collected. To see the amounts used in this calculated value, see
        /// the APPOINTMENTCOPAY fields.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "copay")]
        public string Copay { get; set; }

        /// <summary>
        /// Gets or sets the encounter id associated with this appointment,
        /// useful for certain other calls. Only present for appointments with
        /// Clinicals that have been checked in.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "encounterid")]
        public string Encounterid { get; set; }

        /// <summary>
        /// Gets or sets the username who scheduled the appointment.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledby")]
        public string Scheduledby { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss) that the appointment
        /// was checked in.
        /// </summary>
        [JsonProperty(PropertyName = "checkindatetime")]
        public string Checkindatetime { get; set; }

        /// <summary>
        /// Gets or sets if the appointment has been cancelled, the username
        /// who cancelled the appointment.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "cancelledby")]
        public string Cancelledby { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss) that the intake
        /// process was completed.
        /// </summary>
        [JsonProperty(PropertyName = "stopintakedatetime")]
        public string Stopintakedatetime { get; set; }

        /// <summary>
        /// Gets or sets the status of this patient in the encounter
        /// (READYFORSTAFF, WITHSTAFF, READFORPROVIDER, CHECKEDOUT). Only
        /// present for appointments with Clinicals that have been checked in.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "encounterstatus")]
        public string Encounterstatus { get; set; }

        /// <summary>
        /// Gets or sets if true, this appointment slot is frozen
        ///
        /// </summary>
        [JsonProperty(PropertyName = "frozenyn")]
        public bool? Frozenyn { get; set; }

        /// <summary>
        /// Gets or sets the practice-friendly (not patient friendly) name for
        /// this appointment type. Note that this may not be the same as the
        /// booked appointment because of "generic" slots.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "appointmenttype")]
        public string Appointmenttype { get; set; }

        /// <summary>
        /// Gets or sets this is the ID for the appointment type. Note that
        /// this may not be the same as the booked appointment because of
        /// "generic" slots.
        /// </summary>
        [JsonProperty(PropertyName = "appointmenttypeid")]
        public int? Appointmenttypeid { get; set; }

        /// <summary>
        /// Gets or sets if the appointment was cancelled, the numeric ID
        /// (local to the practice) for the cancel reason.
        /// </summary>
        [JsonProperty(PropertyName = "cancelreasonid")]
        public int? Cancelreasonid { get; set; }

        /// <summary>
        /// Gets or sets if the appointment was cancelled, if the cancel reason
        /// is marked as a no show reason.
        /// </summary>
        [JsonProperty(PropertyName = "cancelreasonnoshow")]
        public bool? Cancelreasonnoshow { get; set; }

        /// <summary>
        /// Gets or sets if the appointment was cancelled, if the cancel reason
        /// is marked as a slot available reason.
        /// </summary>
        [JsonProperty(PropertyName = "cancelreasonslotavailable")]
        public bool? Cancelreasonslotavailable { get; set; }

        /// <summary>
        /// Gets or sets if true, the appointment was booked through
        /// athenaCoordinator Enterprise.
        /// </summary>
        [JsonProperty(PropertyName = "coordinatorenterpriseyn")]
        public bool? Coordinatorenterpriseyn { get; set; }

        /// <summary>
        /// Gets or sets in minutes
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss; Eastern time) that
        /// this appointment was scheduled.
        /// </summary>
        [JsonProperty(PropertyName = "scheduleddatetime")]
        public string Scheduleddatetime { get; set; }

        /// <summary>
        /// Gets or sets urgent flag for the appointment.
        /// </summary>
        [JsonProperty(PropertyName = "urgentyn")]
        public bool? Urgentyn { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when the appointment started the check
        /// in process. If this is set while an appointment is still in status
        /// 'f', it means that the check-in process has begun but is not yet
        /// completed.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "startcheckin")]
        public string Startcheckin { get; set; }

        /// <summary>
        /// Gets or sets if there is an appointment confirmation result for
        /// this appointment, the numeric ID (global to athenaNet).
        /// </summary>
        [JsonProperty(PropertyName = "appointmentconfirmationid")]
        public int? Appointmentconfirmationid { get; set; }

        /// <summary>
        /// Gets or sets high risk score for Smart Scheduling
        /// </summary>
        [JsonProperty(PropertyName = "suggestedoverbooking")]
        public string Suggestedoverbooking { get; set; }

        /// <summary>
        /// Gets or sets detailed information about the copay for this
        /// appointment. Gives more detail than the COPAY field. Note: this
        /// information is not yet available in all practices, we are rolling
        /// this out slowly.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "appointmentcopay")]
        public IList<AppointmentCopayInformation> Appointmentcopay { get; set; }

        /// <summary>
        /// Gets or sets appointment ID of the booked appointment
        /// </summary>
        [JsonProperty(PropertyName = "appointmentid")]
        public int? Appointmentid { get; set; }

        /// <summary>
        /// Gets or sets the appointment date.
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets see /patients for details
        /// </summary>
        [JsonProperty(PropertyName = "patient")]
        public string Patient { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss) that the appointment
        /// check-out was started.
        /// </summary>
        [JsonProperty(PropertyName = "startcheckoutdatetime")]
        public string Startcheckoutdatetime { get; set; }

        /// <summary>
        /// Gets or sets if there is an appointment confirmation result for
        /// this appointment, the name (global to athenaNet).
        /// </summary>
        [JsonProperty(PropertyName = "appointmentconfirmationname")]
        public string Appointmentconfirmationname { get; set; }

        /// <summary>
        /// Gets or sets an array of expected procedure codes attached to this
        /// appointment.
        /// </summary>
        [JsonProperty(PropertyName = "useexpectedprocedurecodes")]
        public IList<ProcedureCode> Useexpectedprocedurecodes { get; set; }

        /// <summary>
        /// Gets or sets the user who last modified the appointment.
        /// </summary>
        [JsonProperty(PropertyName = "lastmodifiedby")]
        public string Lastmodifiedby { get; set; }

        /// <summary>
        /// Gets or sets the patient-friendly name for this appointment type.
        /// Note that this may not be the same as the booked appointment
        /// because of "generic" slots.
        /// </summary>
        [JsonProperty(PropertyName = "patientappointmenttypename")]
        public string Patientappointmenttypename { get; set; }

        /// <summary>
        /// Gets or sets as HH:MM (where HH is the 0-23 hour and MM is the
        /// minute). This time is local to the department.
        /// </summary>
        [JsonProperty(PropertyName = "starttime")]
        public string Starttime { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when the check-in process was finished
        /// for this appointment.
        /// </summary>
        [JsonProperty(PropertyName = "stopcheckin")]
        public string Stopcheckin { get; set; }

        /// <summary>
        /// Gets or sets id of the provider
        /// </summary>
        [JsonProperty(PropertyName = "providerid")]
        public int? Providerid { get; set; }

        /// <summary>
        /// Gets or sets the time (mm/dd/yyyy hh24:mi:ss) that the exam was
        /// completed.
        /// </summary>
        [JsonProperty(PropertyName = "stopexamdatetime")]
        public string Stopexamdatetime { get; set; }

        /// <summary>
        /// Gets or sets the rendering provider ID.
        /// </summary>
        [JsonProperty(PropertyName = "renderingproviderid")]
        public int? Renderingproviderid { get; set; }

        /// <summary>
        /// Gets or sets the supervising provider ID.
        /// </summary>
        [JsonProperty(PropertyName = "supervisingproviderid")]
        public string Supervisingproviderid { get; set; }

        /// <summary>
        /// Gets or sets as detailed in /claims, if requested.
        /// </summary>
        [JsonProperty(PropertyName = "claims")]
        public IList<AppointmentClaim> Claims { get; set; }

        /// <summary>
        /// Gets or sets the location of the patient. See /patientlocation for
        /// practice list. Only present for appointments with Clinicals that
        /// have been checked in.
        /// </summary>
        [JsonProperty(PropertyName = "patientlocationid")]
        public int? Patientlocationid { get; set; }

        /// <summary>
        /// Gets or sets the status of the clinical encounter associated with
        /// this appointment (OPEN, CLOSED, DELETED, PEND, etc.). This differs
        /// from encounterstatus, which refers to the status of the patient in
        /// the encounter.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "encounterstate")]
        public string Encounterstate { get; set; }

        /// <summary>
        /// Gets or sets when an appointment is rescheduled, this is the ID of
        /// the replacement appointment.
        /// </summary>
        [JsonProperty(PropertyName = "rescheduledappointmentid")]
        public int? Rescheduledappointmentid { get; set; }

        /// <summary>
        /// Gets or sets the referring provider ID.
        /// </summary>
        [JsonProperty(PropertyName = "referringproviderid")]
        public int? Referringproviderid { get; set; }

        /// <summary>
        /// Gets or sets detailed ReminderCall information made for this
        /// appointment.
        /// </summary>
        [JsonProperty(PropertyName = "reminderdetails")]
        public IList<MessageResult> Reminderdetails { get; set; }

        /// <summary>
        /// Gets or sets the original appointment type for this slot. This can
        /// change for generic appointments.
        /// </summary>
        [JsonProperty(PropertyName = "templateappointmenttypeid")]
        public int? Templateappointmenttypeid { get; set; }

        /// <summary>
        /// Gets or sets the original appointment ID. This is useful if an
        /// appointment has been cancelled and you want to find the original
        /// ID.
        /// </summary>
        [JsonProperty(PropertyName = "templateappointmentid")]
        public int? Templateappointmentid { get; set; }

        /// <summary>
        /// Gets or sets the athenaNet patient ID for this appointment
        /// </summary>
        [JsonProperty(PropertyName = "patientid")]
        public int? Patientid { get; set; }

    }
}
