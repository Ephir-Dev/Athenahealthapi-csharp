// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LabResult
    {
        /// <summary>
        /// Initializes a new instance of the LabResult class.
        /// </summary>
        public LabResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LabResult class.
        /// </summary>
        /// <param name="labresultid">Athena ID for this lab result</param>
        /// <param name="analytes">Individual lab result
        /// observations/analytes</param>
        /// <param name="providerid">The provider ID for this document.</param>
        /// <param name="attachmentexists">This flag depicts if the lab result
        /// has a scanned document attachment or not.</param>
        /// <param name="labresultdatetime">The observation date and time
        /// associated with this lab result. Returned in mm/dd/yyyy hh24:mi:ss
        /// format.
        /// </param>
        /// <param name="priority">Document priority, when available. 1 is
        /// high, 2 is normal. Some labs use other numbers or characters that
        /// are lab-specific.
        /// </param>
        /// <param name="patientnote">The external note for the
        /// patient.</param>
        /// <param name="internalnote">The 'Internal Note' attached to this
        /// document.</param>
        /// <param name="facilityid">The ID of the clinical provider associated
        /// with this clinical document. Clinical providers are a master list
        /// of providers throughout the country. These include providers as
        /// well as radiology centers, labs and pharmacies.
        /// </param>
        /// <param name="orderid">The athena ID of the associated order
        /// document</param>
        /// <param name="description">Description for this lab result</param>
        /// <param name="labresultloinc">The LOINC for the result document or
        /// associated order.</param>
        /// <param name="labresultdate">Observation date associated with this
        /// lab result</param>
        /// <param name="labresultnote">Additional note associated with this
        /// lab result, if any</param>
        /// <param name="resultstatus">The status of the result (e.g., "final",
        /// "preliminary", "corrected", etc.)</param>
        public LabResult(int labresultid, IList<Analyte> analytes = default(IList<Analyte>), int? providerid = default(int?), bool? attachmentexists = default(bool?), string labresultdatetime = default(string), string priority = default(string), string patientnote = default(string), string internalnote = default(string), int? facilityid = default(int?), string orderid = default(string), string description = default(string), string labresultloinc = default(string), string labresultdate = default(string), string labresultnote = default(string), string resultstatus = default(string))
        {
            Analytes = analytes;
            Providerid = providerid;
            Attachmentexists = attachmentexists;
            Labresultdatetime = labresultdatetime;
            Priority = priority;
            Patientnote = patientnote;
            Internalnote = internalnote;
            Facilityid = facilityid;
            Labresultid = labresultid;
            Orderid = orderid;
            Description = description;
            Labresultloinc = labresultloinc;
            Labresultdate = labresultdate;
            Labresultnote = labresultnote;
            Resultstatus = resultstatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets individual lab result observations/analytes
        /// </summary>
        [JsonProperty(PropertyName = "analytes")]
        public IList<Analyte> Analytes { get; set; }

        /// <summary>
        /// Gets or sets the provider ID for this document.
        /// </summary>
        [JsonProperty(PropertyName = "providerid")]
        public int? Providerid { get; set; }

        /// <summary>
        /// Gets or sets this flag depicts if the lab result has a scanned
        /// document attachment or not.
        /// </summary>
        [JsonProperty(PropertyName = "attachmentexists")]
        public bool? Attachmentexists { get; set; }

        /// <summary>
        /// Gets or sets the observation date and time associated with this lab
        /// result. Returned in mm/dd/yyyy hh24:mi:ss format.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "labresultdatetime")]
        public string Labresultdatetime { get; set; }

        /// <summary>
        /// Gets or sets document priority, when available. 1 is high, 2 is
        /// normal. Some labs use other numbers or characters that are
        /// lab-specific.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or sets the external note for the patient.
        /// </summary>
        [JsonProperty(PropertyName = "patientnote")]
        public string Patientnote { get; set; }

        /// <summary>
        /// Gets or sets the 'Internal Note' attached to this document.
        /// </summary>
        [JsonProperty(PropertyName = "internalnote")]
        public string Internalnote { get; set; }

        /// <summary>
        /// Gets or sets the ID of the clinical provider associated with this
        /// clinical document. Clinical providers are a master list of
        /// providers throughout the country. These include providers as well
        /// as radiology centers, labs and pharmacies.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "facilityid")]
        public int? Facilityid { get; set; }

        /// <summary>
        /// Gets or sets athena ID for this lab result
        /// </summary>
        [JsonProperty(PropertyName = "labresultid")]
        public int Labresultid { get; set; }

        /// <summary>
        /// Gets or sets the athena ID of the associated order document
        /// </summary>
        [JsonProperty(PropertyName = "orderid")]
        public string Orderid { get; set; }

        /// <summary>
        /// Gets or sets description for this lab result
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the LOINC for the result document or associated order.
        /// </summary>
        [JsonProperty(PropertyName = "labresultloinc")]
        public string Labresultloinc { get; set; }

        /// <summary>
        /// Gets or sets observation date associated with this lab result
        /// </summary>
        [JsonProperty(PropertyName = "labresultdate")]
        public string Labresultdate { get; set; }

        /// <summary>
        /// Gets or sets additional note associated with this lab result, if
        /// any
        /// </summary>
        [JsonProperty(PropertyName = "labresultnote")]
        public string Labresultnote { get; set; }

        /// <summary>
        /// Gets or sets the status of the result (e.g., "final",
        /// "preliminary", "corrected", etc.)
        /// </summary>
        [JsonProperty(PropertyName = "resultstatus")]
        public string Resultstatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
