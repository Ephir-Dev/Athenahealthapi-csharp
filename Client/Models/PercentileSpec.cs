// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PercentileSpec
    {
        /// <summary>
        /// Initializes a new instance of the PercentileSpec class.
        /// </summary>
        public PercentileSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PercentileSpec class.
        /// </summary>
        /// <param name="high">The highest value the y value could be.</param>
        /// <param name="highordinal">Ordinal of the high value.</param>
        /// <param name="low">The lowest value that y could be.</param>
        /// <param name="lowordinal">Ordinal of the lowest value.</param>
        /// <param name="prefix">Indicator of less than or greater. Possible
        /// values: (&gt;,&lt;)
        /// </param>
        public PercentileSpec(int? high = default(int?), string highordinal = default(string), int? low = default(int?), string lowordinal = default(string), string prefix = default(string))
        {
            High = high;
            Highordinal = highordinal;
            Low = low;
            Lowordinal = lowordinal;
            Prefix = prefix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the highest value the y value could be.
        /// </summary>
        [JsonProperty(PropertyName = "high")]
        public int? High { get; set; }

        /// <summary>
        /// Gets or sets ordinal of the high value.
        /// </summary>
        [JsonProperty(PropertyName = "highordinal")]
        public string Highordinal { get; set; }

        /// <summary>
        /// Gets or sets the lowest value that y could be.
        /// </summary>
        [JsonProperty(PropertyName = "low")]
        public int? Low { get; set; }

        /// <summary>
        /// Gets or sets ordinal of the lowest value.
        /// </summary>
        [JsonProperty(PropertyName = "lowordinal")]
        public string Lowordinal { get; set; }

        /// <summary>
        /// Gets or sets indicator of less than or greater. Possible values:
        /// (&amp;gt;,&amp;lt;)
        ///
        /// </summary>
        [JsonProperty(PropertyName = "prefix")]
        public string Prefix { get; set; }

    }
}
