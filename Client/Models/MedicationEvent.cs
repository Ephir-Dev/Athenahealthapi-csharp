// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AthenaHealth.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MedicationEvent
    {
        /// <summary>
        /// Initializes a new instance of the MedicationEvent class.
        /// </summary>
        public MedicationEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MedicationEvent class.
        /// </summary>
        /// <param name="type">The event type. Can be START, END, ORDER, ENTER,
        /// FILL, or HIDE.</param>
        /// <param name="eventdate">The date this event occurred</param>
        /// <param name="userdisplayname">The display name for the user most
        /// relevant for this event. May be null.</param>
        public MedicationEvent(string type, string eventdate, string userdisplayname = default(string))
        {
            Type = type;
            Eventdate = eventdate;
            Userdisplayname = userdisplayname;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the event type. Can be START, END, ORDER, ENTER, FILL,
        /// or HIDE.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the date this event occurred
        /// </summary>
        [JsonProperty(PropertyName = "eventdate")]
        public string Eventdate { get; set; }

        /// <summary>
        /// Gets or sets the display name for the user most relevant for this
        /// event. May be null.
        /// </summary>
        [JsonProperty(PropertyName = "userdisplayname")]
        public string Userdisplayname { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Eventdate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Eventdate");
            }
        }
    }
}
