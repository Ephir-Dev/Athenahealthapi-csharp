// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AndriiKurdiumov.AuthenaHealth.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IAthenaHealth : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Variant of the API
        /// </summary>
        string Apivariant { get; set; }

        /// <summary>
        /// Id of the practice
        /// </summary>
        int Practiceid { get; set; }

        /// <summary>
        /// Number of entries to return (default 1500, max 5000)
        /// </summary>
        int? Limit { get; set; }

        /// <summary>
        /// Starting point of entries; 0-indexed
        /// </summary>
        int? Offset { get; set; }

        /// <summary>
        /// Client API version.
        /// </summary>
        string ApiVersion { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <param name='limit'>
        /// Number of entries to return (default 1500, max 5000)
        /// </param>
        /// <param name='offset'>
        /// Starting point of entries; 0-indexed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PracticesInformationList>> GetPracticeInfoWithHttpMessagesAsync(int? limit = default(int?), int? offset = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <param name='limit'>
        /// Number of entries to return (default 1500, max 5000)
        /// </param>
        /// <param name='offset'>
        /// Starting point of entries; 0-indexed
        /// </param>
        /// <param name='hospitalonly'>
        /// If set to true, return hospital only departments.
        /// </param>
        /// <param name='showalldepartments'>
        /// By default, departments hidden in the portal do not appear. When
        /// this is set to true, that restriction is not applied. Default is
        /// false.
        /// </param>
        /// <param name='providerlist'>
        /// If set to true, list providers who see patients in this department.
        /// Default is false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DepartmentInformationList>> GetDepartmentsWithHttpMessagesAsync(int? limit = default(int?), int? offset = default(int?), bool? hospitalonly = default(bool?), bool? showalldepartments = default(bool?), bool? providerlist = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <param name='departmentid'>
        /// Primary (registration) department ID.
        /// </param>
        /// <param name='firstname'>
        /// First name of the patient to find.
        /// </param>
        /// <param name='lastname'>
        /// Last name of the patient to find.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PatientInformationList>> GetPatientsWithHttpMessagesAsync(int? departmentid = default(int?), string firstname = default(string), string lastname = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <param name='address1'>
        /// Patient's address - 1st line (Max length: 100)
        /// </param>
        /// <param name='address2'>
        /// Patient's address - 2nd line (Max length: 100)
        /// </param>
        /// <param name='city'>
        /// Patient's city (Max length: 30)
        /// </param>
        /// <param name='departmentid'>
        /// Primary (registration) department ID.
        /// </param>
        /// <param name='dob'>
        /// Patient's DOB (mm/dd/yyyy)
        /// </param>
        /// <param name='email'>
        /// Patient's email address. 'declined' can be used to indicate just
        /// that.
        /// </param>
        /// <param name='firstname'>
        /// Patient's first name
        /// </param>
        /// <param name='homephone'>
        /// The patient's home phone number. Invalid numbers in a GET will be
        /// ignored. Patient phone numbers and other data may change, and one
        /// phone number may be associated with multiple patients. You are
        /// responsible for taking additional steps to verify patient identity
        /// and for using this data in accordance with applicable law,
        /// including HIPAA. Only phone numbers that exist in the North
        /// American Naming Plan (NANP) are acceptable for input.
        /// </param>
        /// <param name='lastname'>
        /// Patient's last name
        /// </param>
        /// <param name='mobilephone'>
        /// The patient's mobile phone number. On input, 'declined' can be used
        /// to indicate no number. (Alternatively, hasmobile can also be set to
        /// false. "declined" simply does this for you.) Invalid numbers in a
        /// GET will be ignored. Patient phone numbers and other data may
        /// change, and one phone number may be associated with multiple
        /// patients. You are responsible for taking additional steps to verify
        /// patient identity and for using this data in accordance with
        /// applicable law, including HIPAA. Only phone numbers that exist in
        /// the North American Naming Plan (NANP) are acceptable for input.
        /// </param>
        /// <param name='state'>
        /// Patient's state (2 letter abbreviation)
        /// </param>
        /// <param name='zip'>
        /// Patient's zip. Matching occurs on first 5 characters.
        /// </param>
        /// <param name='sex'>
        /// Patient's sex (M/F)
        /// </param>
        /// <param name='race'>
        /// The patient race, using the 2.16.840.1.113883.5.104 codeset. See
        /// http://www.hl7.org/implement/standards/fhir/terminologies-v3.html
        /// Special case: use "declined" to indicate that the patient declined
        /// to answer. Multiple values or a tab-seperated list of codes is
        /// acceptable for multiple races for input. The first race will be
        /// considered "primary". Note: you must update all values at once if
        /// you update any.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePatientWithHttpMessagesAsync(string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), string dob = default(string), string email = default(string), string firstname = default(string), string homephone = default(string), string lastname = default(string), string mobilephone = default(string), string state = default(string), string zip = default(string), string sex = default(string), string race = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a patients by ID
        /// </summary>
        /// <param name='patientId'>
        /// Id of the patient for which get information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PatientInformation>>> GetPatientByIdWithHttpMessagesAsync(int patientId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
